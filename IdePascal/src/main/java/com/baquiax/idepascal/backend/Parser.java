
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 08 01:45:52 CST 2024
//----------------------------------------------------

package com.baquiax.idepascal.backend;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import com.baquiax.idepascal.backend.errores.*;
import com.baquiax.idepascal.backend.stament.*;
import com.baquiax.idepascal.backend.simbol.*;
import com.baquiax.idepascal.backend.expresion.*;
import com.baquiax.idepascal.backend.expresion.operacion.aritmetica.*;
import com.baquiax.idepascal.backend.expresion.operacion.booleanos.*;
import com.baquiax.idepascal.backend.expresion.operacion.relacional.*;
import com.baquiax.idepascal.backend.declaracion.*;
import com.baquiax.idepascal.backend.sentencias.*;
import com.baquiax.idepascal.backend.funcion.*;
import com.baquiax.idepascal.backend.simbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 08 01:45:52 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\006\000\002\006\004\000" +
    "\002\006\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\014\004\000\002\015" +
    "\004\000\002\015\003\000\002\016\006\000\002\016\010" +
    "\000\002\016\016\000\002\017\004\000\002\020\004\000" +
    "\002\020\003\000\002\021\006\000\002\022\004\000\002" +
    "\023\004\000\002\023\003\000\002\024\006\000\002\024" +
    "\010\000\002\024\006\000\002\024\010\000\002\024\016" +
    "\000\002\024\016\000\002\025\011\000\002\026\004\000" +
    "\002\026\003\000\002\027\017\000\002\027\006\000\002" +
    "\027\006\000\002\030\005\000\002\030\003\000\002\031" +
    "\003\000\002\037\005\000\002\040\010\000\002\040\012" +
    "\000\002\040\012\000\002\040\014\000\002\040\014\000" +
    "\002\040\016\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\035\006\000\002\036" +
    "\006\000\002\033\005\000\002\033\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\006\000\002\032\006\000\002\032\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\006" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\012\006\014\011\015\045\007\047\005\001" +
    "\002\000\004\002\263\001\002\000\004\110\171\001\002" +
    "\000\014\002\ufffb\006\ufffb\011\ufffb\045\ufffb\047\ufffb\001" +
    "\002\000\004\110\171\001\002\000\014\002\ufffc\006\ufffc" +
    "\011\ufffc\045\ufffc\047\ufffc\001\002\000\014\002\000\006" +
    "\014\011\015\045\007\047\005\001\002\000\014\002\ufffd" +
    "\006\ufffd\011\ufffd\045\ufffd\047\ufffd\001\002\000\014\002" +
    "\ufffe\006\ufffe\011\ufffe\045\ufffe\047\ufffe\001\002\000\012" +
    "\024\114\041\106\052\110\110\117\001\002\000\004\110" +
    "\016\001\002\000\004\073\022\001\002\000\016\002\uffed" +
    "\006\uffed\011\uffed\045\uffed\047\uffed\110\016\001\002\000" +
    "\016\002\uffeb\006\uffeb\011\uffeb\045\uffeb\047\uffeb\110\uffeb" +
    "\001\002\000\016\002\uffec\006\uffec\011\uffec\045\uffec\047" +
    "\uffec\110\uffec\001\002\000\024\030\034\055\026\067\024" +
    "\110\035\111\027\112\025\113\023\114\030\115\032\001" +
    "\002\000\054\004\uffb2\014\uffb2\017\uffb2\027\uffb2\032\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\070\uffb2\072\uffb2\073\uffb2\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\001\002\000\024\030\034\055" +
    "\026\067\024\110\035\111\027\112\025\113\023\114\030" +
    "\115\032\001\002\000\054\004\uffb3\014\uffb3\017\uffb3\027" +
    "\uffb3\032\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\070\uffb3\072\uffb3\073\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\054\004\uffb4\014\uffb4" +
    "\017\uffb4\027\uffb4\032\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\070\uffb4\072\uffb4" +
    "\073\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\001" +
    "\002\000\054\004\uffb1\014\uffb1\017\uffb1\027\uffb1\032\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\070\uffb1\072\uffb1\073\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\001\002\000\054\004\uffb5\014" +
    "\uffb5\017\uffb5\027\uffb5\032\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\072" +
    "\uffb5\073\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\001\002\000\054\004\uffb0\014\uffb0\017\uffb0\027\uffb0\032" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\070\uffb0\072\uffb0\073\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\103\uffb0\001\002\000\040\004\040" +
    "\014\050\027\046\032\055\055\041\056\043\057\044\060" +
    "\052\063\102\073\053\077\054\100\051\101\042\102\056" +
    "\103\045\001\002\000\024\030\034\055\026\067\024\110" +
    "\035\111\027\112\025\113\023\114\030\115\032\001\002" +
    "\000\056\004\uffaf\014\uffaf\017\uffaf\027\uffaf\032\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\070\uffaf\071\036\072\uffaf\073\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\001\002\000\024\030\034" +
    "\055\026\067\024\110\035\111\027\112\025\113\023\114" +
    "\030\115\032\001\002\000\040\004\040\014\050\027\046" +
    "\032\055\055\041\056\043\057\044\060\052\072\047\073" +
    "\053\077\054\100\051\101\042\102\056\103\045\001\002" +
    "\000\026\030\034\043\076\055\026\067\024\110\035\111" +
    "\027\112\025\113\023\114\030\115\032\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\024\030\034\055\026" +
    "\067\024\110\035\111\027\112\025\113\023\114\030\115" +
    "\032\001\002\000\024\030\034\055\026\067\024\110\035" +
    "\111\027\112\025\113\023\114\030\115\032\001\002\000" +
    "\024\030\034\055\026\067\024\110\035\111\027\112\025" +
    "\113\023\114\030\115\032\001\002\000\024\030\034\055" +
    "\026\067\024\110\035\111\027\112\025\113\023\114\030" +
    "\115\032\001\002\000\024\030\034\055\026\067\024\110" +
    "\035\111\027\112\025\113\023\114\030\115\032\001\002" +
    "\000\054\004\uffae\014\uffae\017\uffae\027\uffae\032\uffae\055" +
    "\uffae\056\uffae\057\uffae\060\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\uffae\070\uffae\072\uffae\073\uffae\077\uffae\100\uffae\101" +
    "\uffae\102\uffae\103\uffae\001\002\000\024\030\034\055\026" +
    "\067\024\110\035\111\027\112\025\113\023\114\030\115" +
    "\032\001\002\000\024\030\034\055\026\067\024\110\035" +
    "\111\027\112\025\113\023\114\030\115\032\001\002\000" +
    "\024\030\034\055\026\067\024\110\035\111\027\112\025" +
    "\113\023\114\030\115\032\001\002\000\024\030\034\055" +
    "\026\067\024\110\035\111\027\112\025\113\023\114\030" +
    "\115\032\001\002\000\024\030\034\055\026\067\024\110" +
    "\035\111\027\112\025\113\023\114\030\115\032\001\002" +
    "\000\026\017\061\030\034\055\026\067\024\110\035\111" +
    "\027\112\025\113\023\114\030\115\032\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\054\004\uffbd\014\050" +
    "\017\uffbd\027\046\032\uffbd\055\041\056\043\057\044\060" +
    "\052\062\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd\072\uffbd" +
    "\073\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\001" +
    "\002\000\054\004\040\014\050\017\uffbb\027\046\032\uffbb" +
    "\055\041\056\043\057\044\060\052\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\070\uffbb\072\uffbb\073\053\077\054\100\051" +
    "\101\042\102\056\103\045\001\002\000\024\030\034\055" +
    "\026\067\024\110\035\111\027\112\025\113\023\114\030" +
    "\115\032\001\002\000\054\004\uffb9\014\uffb9\017\uffb9\027" +
    "\uffb9\032\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\070\uffb9\072\uffb9\073\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000\054" +
    "\004\uffc1\014\050\017\uffc1\027\046\032\uffc1\055\041\056" +
    "\043\057\044\060\052\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\070\uffc1\072\uffc1\073\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\001\002\000\054\004\uffc2\014\050\017\uffc2" +
    "\027\046\032\uffc2\055\041\056\043\057\044\060\052\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\070\uffc2\072\uffc2\073\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002\000" +
    "\054\004\uffc5\014\uffc5\017\uffc5\027\uffc5\032\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\070\uffc5\072\uffc5\073\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\001\002\000\054\004\uffc0\014\050\017" +
    "\uffc0\027\046\032\uffc0\055\041\056\043\057\044\060\052" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0\072\uffc0\073" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\001\002" +
    "\000\054\004\uffc4\014\uffc4\017\uffc4\027\uffc4\032\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\070\uffc4\072\uffc4\073\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\001\002\000\054\004\uffc3\014\uffc3" +
    "\017\uffc3\027\uffc3\032\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\070\uffc3\072\uffc3" +
    "\073\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\001" +
    "\002\000\054\004\uffbe\014\050\017\uffbe\027\046\032\uffbe" +
    "\055\041\056\043\057\044\060\052\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\070\uffbe\072\uffbe\073\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\001\002\000\054\004\uffc6\014" +
    "\uffc6\017\uffc6\027\uffc6\032\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\070\uffc6\072" +
    "\uffc6\073\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\001\002\000\054\004\uffc8\014\050\017\uffc8\027\046\032" +
    "\uffc8\055\uffc8\056\uffc8\057\044\060\052\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\070\uffc8\072\uffc8\073\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\001\002\000\054\004\uffbf" +
    "\014\050\017\uffbf\027\046\032\uffbf\055\041\056\043\057" +
    "\044\060\052\062\uffbf\063\uffbf\064\uffbf\065\uffbf\070\uffbf" +
    "\072\uffbf\073\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\001\002\000\054\004\uffc7\014\050\017\uffc7\027\046" +
    "\032\uffc7\055\uffc7\056\uffc7\057\044\060\052\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\070\uffc7\072\uffc7\073\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\001\002\000\024\030" +
    "\034\055\026\067\024\110\035\111\027\112\025\113\023" +
    "\114\030\115\032\001\002\000\054\004\uffbc\014\050\017" +
    "\uffbc\027\046\032\uffbc\055\041\056\043\057\044\060\052" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\070\uffbc\072\uffbc\073" +
    "\053\077\054\100\051\101\042\102\056\103\045\001\002" +
    "\000\054\004\040\014\050\017\uffba\027\046\032\055\055" +
    "\041\056\043\057\044\060\052\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\070\uffba\072\uffba\073\053\077\054\100\051\101" +
    "\042\102\056\103\045\001\002\000\054\004\uffb7\014\uffb7" +
    "\017\uffb7\027\uffb7\032\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\072\uffb7" +
    "\073\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\001" +
    "\002\000\016\002\uffea\006\uffea\011\uffea\045\uffea\047\uffea" +
    "\110\uffea\001\002\000\054\004\uffb6\014\uffb6\017\uffb6\027" +
    "\uffb6\032\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\070\uffb6\072\uffb6\073\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\001\002\000\040" +
    "\004\040\014\050\027\046\032\055\055\041\056\043\057" +
    "\044\060\052\070\105\073\053\077\054\100\051\101\042" +
    "\102\056\103\045\001\002\000\054\004\uffb8\014\uffb8\017" +
    "\uffb8\027\uffb8\032\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\072\uffb8\073" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\001\002" +
    "\000\004\067\165\001\002\000\014\020\163\024\114\041" +
    "\106\052\110\110\117\001\002\000\004\067\155\001\002" +
    "\000\004\063\154\001\002\000\004\063\153\001\002\000" +
    "\014\020\ufff8\024\ufff8\041\ufff8\052\ufff8\110\ufff8\001\002" +
    "\000\004\067\124\001\002\000\004\063\123\001\002\000" +
    "\004\063\122\001\002\000\004\061\120\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\042\004\040\014\050" +
    "\017\uffd7\027\046\032\055\055\041\056\043\057\044\060" +
    "\052\063\uffd7\073\053\077\054\100\051\101\042\102\056" +
    "\103\045\001\002\000\014\020\ufff4\024\ufff4\041\ufff4\052" +
    "\ufff4\110\ufff4\001\002\000\014\020\ufff7\024\ufff7\041\ufff7" +
    "\052\ufff7\110\ufff7\001\002\000\024\030\034\055\026\067" +
    "\024\110\035\111\027\112\025\113\023\114\030\115\032" +
    "\001\002\000\040\004\040\014\050\027\046\032\055\055" +
    "\041\056\043\057\044\060\052\070\126\073\053\077\054" +
    "\100\051\101\042\102\056\103\045\001\002\000\004\043" +
    "\127\001\002\000\014\006\135\024\114\041\106\052\110" +
    "\110\117\001\002\000\006\017\146\063\uffd6\001\002\000" +
    "\006\017\uffcf\063\uffcf\001\002\000\006\017\uffce\063\uffce" +
    "\001\002\000\006\017\uffd0\063\uffd0\001\002\000\006\017" +
    "\uffcd\063\uffcd\001\002\000\012\024\114\041\106\052\110" +
    "\110\117\001\002\000\014\020\140\024\114\041\106\052" +
    "\110\110\117\001\002\000\014\020\ufff9\024\ufff9\041\ufff9" +
    "\052\ufff9\110\ufff9\001\002\000\006\017\141\063\uffd5\001" +
    "\002\000\014\006\143\024\114\041\106\052\110\110\117" +
    "\001\002\000\006\017\uffd2\063\uffd2\001\002\000\012\024" +
    "\114\041\106\052\110\110\117\001\002\000\014\020\145" +
    "\024\114\041\106\052\110\110\117\001\002\000\006\017" +
    "\uffd1\063\uffd1\001\002\000\014\006\150\024\114\041\106" +
    "\052\110\110\117\001\002\000\006\017\uffd4\063\uffd4\001" +
    "\002\000\012\024\114\041\106\052\110\110\117\001\002" +
    "\000\014\020\152\024\114\041\106\052\110\110\117\001" +
    "\002\000\006\017\uffd3\063\uffd3\001\002\000\014\020\ufff5" +
    "\024\ufff5\041\ufff5\052\ufff5\110\ufff5\001\002\000\014\020" +
    "\ufff6\024\ufff6\041\ufff6\052\ufff6\110\ufff6\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\042\004\040\014\050" +
    "\027\046\032\055\055\041\056\043\057\044\060\052\062" +
    "\uffc9\070\uffc9\073\053\077\054\100\051\101\042\102\056" +
    "\103\045\001\002\000\006\062\160\070\161\001\002\000" +
    "\024\030\034\055\026\067\024\110\035\111\027\112\025" +
    "\113\023\114\030\115\032\001\002\000\006\017\uffcc\063" +
    "\uffcc\001\002\000\042\004\040\014\050\027\046\032\055" +
    "\055\041\056\043\057\044\060\052\062\uffca\070\uffca\073" +
    "\053\077\054\100\051\101\042\102\056\103\045\001\002" +
    "\000\004\064\164\001\002\000\014\002\ufffa\006\ufffa\011" +
    "\ufffa\045\ufffa\047\ufffa\001\002\000\024\030\034\055\026" +
    "\067\024\110\035\111\027\112\025\113\023\114\030\115" +
    "\032\001\002\000\006\062\160\070\167\001\002\000\006" +
    "\017\uffcb\063\uffcb\001\002\000\014\002\uffff\006\uffff\011" +
    "\uffff\045\uffff\047\uffff\001\002\000\010\062\uffd8\066\uffd8" +
    "\073\uffd8\001\002\000\016\002\ufff1\006\ufff1\011\ufff1\045" +
    "\ufff1\047\ufff1\110\ufff1\001\002\000\006\062\177\073\200" +
    "\001\002\000\010\062\uffd9\066\uffd9\073\uffd9\001\002\000" +
    "\016\002\ufff3\006\ufff3\011\ufff3\045\ufff3\047\ufff3\110\171" +
    "\001\002\000\016\002\ufff2\006\ufff2\011\ufff2\045\ufff2\047" +
    "\ufff2\110\ufff2\001\002\000\004\110\171\001\002\000\040" +
    "\005\210\012\205\030\034\037\207\053\206\055\026\067" +
    "\024\105\204\106\203\110\035\111\027\112\025\113\023" +
    "\114\030\115\032\001\002\000\004\063\225\001\002\000" +
    "\040\004\040\014\050\027\046\032\055\055\041\056\043" +
    "\057\044\060\052\065\222\073\053\077\054\100\051\101" +
    "\042\102\056\103\045\001\002\000\006\063\uffab\073\uffab" +
    "\001\002\000\006\063\uffaa\073\uffaa\001\002\000\006\063" +
    "\uffa9\073\uffa9\001\002\000\006\063\uffad\073\uffad\001\002" +
    "\000\006\063\uffac\073\uffac\001\002\000\004\071\211\001" +
    "\002\000\024\030\034\055\026\067\024\110\035\111\027" +
    "\112\025\113\023\114\030\115\032\001\002\000\040\004" +
    "\040\014\050\027\046\032\055\055\041\056\043\057\044" +
    "\060\052\064\213\073\053\077\054\100\051\101\042\102" +
    "\056\103\045\001\002\000\004\064\214\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\040\004\040\014\050" +
    "\027\046\032\055\055\041\056\043\057\044\060\052\072" +
    "\216\073\053\077\054\100\051\101\042\102\056\103\045" +
    "\001\002\000\004\031\217\001\002\000\014\012\205\037" +
    "\207\053\206\105\204\106\203\001\002\000\004\063\221" +
    "\001\002\000\016\002\uffee\006\uffee\011\uffee\045\uffee\047" +
    "\uffee\110\uffee\001\002\000\024\030\034\055\026\067\024" +
    "\110\035\111\027\112\025\113\023\114\030\115\032\001" +
    "\002\000\040\004\040\014\050\027\046\032\055\055\041" +
    "\056\043\057\044\060\052\063\224\073\053\077\054\100" +
    "\051\101\042\102\056\103\045\001\002\000\016\002\uffef" +
    "\006\uffef\011\uffef\045\uffef\047\uffef\110\uffef\001\002\000" +
    "\016\002\ufff0\006\ufff0\011\ufff0\045\ufff0\047\ufff0\110\ufff0" +
    "\001\002\000\010\062\uffda\066\uffda\073\uffda\001\002\000" +
    "\016\002\uffe7\006\uffe7\011\uffe7\045\uffe7\047\uffe7\110\uffe7" +
    "\001\002\000\006\062\177\066\233\001\002\000\016\002" +
    "\uffe9\006\uffe9\011\uffe9\045\uffe9\047\uffe9\110\171\001\002" +
    "\000\016\002\uffe8\006\uffe8\011\uffe8\045\uffe8\047\uffe8\110" +
    "\uffe8\001\002\000\040\005\237\012\205\030\034\037\207" +
    "\053\206\055\026\067\024\105\204\106\203\110\236\111" +
    "\027\112\025\113\023\114\030\115\032\001\002\000\006" +
    "\063\257\073\260\001\002\000\040\004\040\014\050\027" +
    "\046\032\055\055\041\056\043\057\044\060\052\065\254" +
    "\073\053\077\054\100\051\101\042\102\056\103\045\001" +
    "\002\000\044\004\uffaf\014\uffaf\027\uffaf\032\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\063\253\065\uffaf\071\036\073" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\001\002" +
    "\000\004\071\240\001\002\000\024\030\034\055\026\067" +
    "\024\110\035\111\027\112\025\113\023\114\030\115\032" +
    "\001\002\000\040\004\040\014\050\027\046\032\055\055" +
    "\041\056\043\057\044\060\052\064\242\073\053\077\054" +
    "\100\051\101\042\102\056\103\045\001\002\000\004\064" +
    "\243\001\002\000\024\030\034\055\026\067\024\110\035" +
    "\111\027\112\025\113\023\114\030\115\032\001\002\000" +
    "\040\004\040\014\050\027\046\032\055\055\041\056\043" +
    "\057\044\060\052\072\245\073\053\077\054\100\051\101" +
    "\042\102\056\103\045\001\002\000\004\031\246\001\002" +
    "\000\016\012\205\037\207\053\206\105\204\106\203\110" +
    "\247\001\002\000\004\063\252\001\002\000\004\063\251" +
    "\001\002\000\016\002\uffe2\006\uffe2\011\uffe2\045\uffe2\047" +
    "\uffe2\110\uffe2\001\002\000\016\002\uffe1\006\uffe1\011\uffe1" +
    "\045\uffe1\047\uffe1\110\uffe1\001\002\000\016\002\uffe4\006" +
    "\uffe4\011\uffe4\045\uffe4\047\uffe4\110\uffe4\001\002\000\024" +
    "\030\034\055\026\067\024\110\035\111\027\112\025\113" +
    "\023\114\030\115\032\001\002\000\040\004\040\014\050" +
    "\027\046\032\055\055\041\056\043\057\044\060\052\063" +
    "\256\073\053\077\054\100\051\101\042\102\056\103\045" +
    "\001\002\000\016\002\uffe3\006\uffe3\011\uffe3\045\uffe3\047" +
    "\uffe3\110\uffe3\001\002\000\016\002\uffe6\006\uffe6\011\uffe6" +
    "\045\uffe6\047\uffe6\110\uffe6\001\002\000\024\030\034\055" +
    "\026\067\024\110\035\111\027\112\025\113\023\114\030" +
    "\115\032\001\002\000\040\004\040\014\050\027\046\032" +
    "\055\055\041\056\043\057\044\060\052\063\262\073\053" +
    "\077\054\100\051\101\042\102\056\103\045\001\002\000" +
    "\016\002\uffe5\006\uffe5\011\uffe5\045\uffe5\047\uffe5\110\uffe5" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\016\002\003\003\010\007\012\014\011\017" +
    "\007\022\005\001\001\000\002\001\001\000\012\023\230" +
    "\024\226\030\227\031\173\001\001\000\002\001\001\000" +
    "\012\015\174\016\171\030\172\031\173\001\001\000\002" +
    "\001\001\000\012\007\167\014\011\017\007\022\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\106" +
    "\010\112\035\114\036\110\037\111\040\115\001\001\000" +
    "\006\020\016\021\017\001\001\000\002\001\001\000\004" +
    "\021\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\032\042\030\001\001\000\002\001\001\000\006" +
    "\032\103\042\030\001\001\000\002\001\001\000\006\032" +
    "\102\042\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\100\042\030\001\001\000\002\001\001\000\006" +
    "\032\036\042\030\001\001\000\002\001\001\000\006\032" +
    "\076\042\030\001\001\000\006\032\074\042\030\001\001" +
    "\000\006\032\073\042\030\001\001\000\006\032\072\042" +
    "\030\001\001\000\006\032\071\042\030\001\001\000\006" +
    "\032\070\042\030\001\001\000\006\032\067\042\030\001" +
    "\001\000\002\001\001\000\006\032\066\042\030\001\001" +
    "\000\006\032\065\042\030\001\001\000\006\032\064\042" +
    "\030\001\001\000\006\032\063\042\030\001\001\000\006" +
    "\032\062\042\030\001\001\000\006\032\057\042\030\001" +
    "\001\000\006\032\056\042\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\061\042\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\077\042" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\136" +
    "\035\114\036\110\037\111\040\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\120\042\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\124\042\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\127\035\132\036\130\037\131\040\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\135\010" +
    "\112\035\114\036\110\037\111\040\115\001\001\000\014" +
    "\010\136\035\114\036\110\037\111\040\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\141\035\132" +
    "\036\130\037\131\040\133\001\001\000\002\001\001\000" +
    "\016\006\143\010\112\035\114\036\110\037\111\040\115" +
    "\001\001\000\014\010\136\035\114\036\110\037\111\040" +
    "\115\001\001\000\002\001\001\000\014\012\146\035\132" +
    "\036\130\037\131\040\133\001\001\000\002\001\001\000" +
    "\016\006\150\010\112\035\114\036\110\037\111\040\115" +
    "\001\001\000\014\010\136\035\114\036\110\037\111\040" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\155\033\156\042\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\161\042\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\155\033\165\042\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\175\030\172\031\173\001" +
    "\001\000\002\001\001\000\004\031\225\001\001\000\010" +
    "\032\201\042\030\043\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\211\042\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\214\042\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\222\042" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\231\030\227\031\173\001\001\000\002" +
    "\001\001\000\010\032\234\042\030\043\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\240\042\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\243\042\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\254\042" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\260\042\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer){
    super(lexer);
    }

    public List<ErrorPascal> listaErrores = new ArrayList<>();

    public void syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value) + " lin,col: " +s.left +" "+s.right;
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.SEMANTICO.name(), description, s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value);
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.SEMANTICO.name(), description, s.left, s.right));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // data_type ::= TKCHAR 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // data_type ::= STRING 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CADENA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // data_type ::= REAL 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // data_type ::= INTEGER 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.ENTERO; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= IDENTIFICADOR COR_A expresion COR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= IDENTIFICADOR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= FALSE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(false, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= TRUE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(true, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= CADENA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(a, new Tipo(DataType.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= DECIMAL 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Double.parseDouble(a), new Tipo(DataType.REAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= ENTERO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Integer.parseInt(a), new Tipo(DataType.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= valor 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unario(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= NOT expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NOT(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= PAR_A expresion PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion OR ELSE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion AND THEN expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion OR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OR(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion AND expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MenorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MayorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MENOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Menor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MAYOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mayor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion DIFERENTE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Diferente(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion IGUALACION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Igual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion MOD expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion DIV expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion DIVISION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MULTI expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Resta(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion SUMA expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Suma(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_write ::= expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_write ::= parametros_write COMA expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // readline ::= READLN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Readline(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readline",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // writeline ::= WRITELN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteLine(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeline",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // un_stament ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // un_stament ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // un_stament ::= readline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // un_stament ::= writeline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, null, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignacion(a, e, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id_variable ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ids_variables ::= id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ids_variables ::= ids_variables COMA id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atributo_record ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atributo_record ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atributo_record ::= ids_variables DOS_PUNTOS PACKED ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atributos_record ::= atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord a = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atributos_record ::= atributos_record atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<AtributoRecord> a = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord b = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_record ::= VAR IDENTIFICADOR DOS_PUNTOS RECORD atributos_record END PUNTO_COMA 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<AtributoRecord> b = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_record",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(5, ids, e1, e2, id, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(4, ids, e1, e2, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= ids_variables DOS_PUNTOS expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(3, ids, e1, e2, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(2, ids, a, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable ::= ids_variables DOS_PUNTOS data_type IGUALACION expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), e, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= variables variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> a = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable b = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_variable ::= VAR variables 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Variable> b = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constante ::= IDENTIFICADOR IGUALACION expresion PUNTO_COMA 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ex = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constante(id, ex, idleft, idright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constantes ::= constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante a = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constantes ::= constantes constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constante> a = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante b = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_contantes ::= CONST constantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Constante> b = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionConstante(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_contantes",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= ids_variables IGUALACION ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo(DataType.ARRAY), new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= ids_variables IGUALACION expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo("", DataType.SUBRANGO), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= ids_variables IGUALACION data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType d = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, new Tipo(d), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos ::= tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo a = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos ::= tipos tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo b = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_tipos ::= TYPE tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionTipos(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stament_bloque ::= sentencia_if PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stament_bloque ::= asignacion PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stament_bloque ::= readline PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stament_bloque ::= writeline PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_codigo ::= stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_codigo ::= bloque_codigo stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stament ::= BEGIN bloque_codigo END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProgramaPrincipal(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stament ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stament ::= declaracion_contantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stament ::= declaracion_tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // staments ::= stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // staments ::= staments stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= staments 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> start_val = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

