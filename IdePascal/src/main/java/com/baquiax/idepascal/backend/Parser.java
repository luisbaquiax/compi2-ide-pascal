
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 12 21:39:56 CST 2024
//----------------------------------------------------

package com.baquiax.idepascal.backend;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import com.baquiax.idepascal.backend.errores.*;
import com.baquiax.idepascal.backend.stament.*;
import com.baquiax.idepascal.backend.simbol.*;
import com.baquiax.idepascal.backend.expresion.*;
import com.baquiax.idepascal.backend.expresion.operacion.aritmetica.*;
import com.baquiax.idepascal.backend.expresion.operacion.booleanos.*;
import com.baquiax.idepascal.backend.expresion.operacion.relacional.*;
import com.baquiax.idepascal.backend.expresion.accesovariable.*;
import com.baquiax.idepascal.backend.declaracion.*;
import com.baquiax.idepascal.backend.sentencias.*;
import com.baquiax.idepascal.backend.funcion.*;
import com.baquiax.idepascal.backend.simbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 12 21:39:56 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\010\007\000\002\010\006" +
    "\000\002\010\006\000\002\010\005\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\020\017\000\002\020\016\000\002\020\016" +
    "\000\002\020\015\000\002\021\015\000\002\021\014\000" +
    "\002\021\014\000\002\021\013\000\002\022\005\000\002" +
    "\022\003\000\002\023\006\000\002\023\006\000\002\023" +
    "\005\000\002\023\005\000\002\051\006\000\002\051\005" +
    "\000\002\006\005\000\002\006\003\000\002\005\004\000" +
    "\002\005\003\000\002\011\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\004\000\002\030\004\000\002\031\004\000\002" +
    "\031\003\000\002\032\006\000\002\032\010\000\002\032" +
    "\016\000\002\033\004\000\002\034\004\000\002\034\003" +
    "\000\002\035\006\000\002\036\004\000\002\037\004\000" +
    "\002\037\003\000\002\040\006\000\002\040\010\000\002" +
    "\040\006\000\002\040\010\000\002\040\016\000\002\040" +
    "\016\000\002\041\011\000\002\042\004\000\002\042\003" +
    "\000\002\043\017\000\002\043\006\000\002\043\006\000" +
    "\002\044\005\000\002\044\003\000\002\045\003\000\002" +
    "\056\005\000\002\056\010\000\002\057\010\000\002\057" +
    "\012\000\002\057\012\000\002\057\014\000\002\057\014" +
    "\000\002\057\016\000\002\012\013\000\002\012\016\000" +
    "\002\012\011\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\010\000\002\060\012\000\002\061" +
    "\012\000\002\062\006\000\002\054\003\000\002\055\003" +
    "\000\002\052\006\000\002\052\005\000\002\053\006\000" +
    "\002\050\005\000\002\050\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\006\000\002\046\006\000\002\046\005\000\002\046" +
    "\004\000\002\046\004\000\002\046\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\006\000\002" +
    "\063\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\004\035\005\001\002\000\004\002\u0149\001" +
    "\002\000\004\112\006\001\002\000\004\063\007\001\002" +
    "\000\020\003\020\006\026\011\027\022\024\034\012\045" +
    "\016\047\014\001\002\000\022\002\ufffe\003\ufffe\006\ufffe" +
    "\011\ufffe\022\ufffe\034\ufffe\045\ufffe\047\ufffe\001\002\000" +
    "\022\002\000\003\020\006\026\011\027\022\024\034\012" +
    "\045\016\047\014\001\002\000\004\112\u012f\001\002\000" +
    "\016\006\ufff2\011\ufff2\022\ufff2\034\ufff2\045\ufff2\047\ufff2" +
    "\001\002\000\004\112\311\001\002\000\016\006\ufff4\011" +
    "\ufff4\022\ufff4\034\ufff4\045\ufff4\047\ufff4\001\002\000\004" +
    "\112\311\001\002\000\016\006\ufff5\011\ufff5\022\ufff5\034" +
    "\ufff5\045\ufff5\047\ufff5\001\002\000\004\063\375\001\002" +
    "\000\016\006\ufff3\011\ufff3\022\ufff3\034\ufff3\045\ufff3\047" +
    "\ufff3\001\002\000\016\006\367\011\027\022\024\034\012" +
    "\045\016\047\014\001\002\000\016\006\ufff6\011\ufff6\022" +
    "\ufff6\034\ufff6\045\ufff6\047\ufff6\001\002\000\004\112\304" +
    "\001\002\000\016\006\ufff8\011\ufff8\022\ufff8\034\ufff8\045" +
    "\ufff8\047\ufff8\001\002\000\032\003\147\007\145\010\146" +
    "\013\130\020\137\024\140\040\156\041\161\050\132\052" +
    "\135\054\155\112\151\001\002\000\004\112\030\001\002" +
    "\000\004\073\034\001\002\000\020\006\uffca\011\uffca\022" +
    "\uffca\034\uffca\045\uffca\047\uffca\112\030\001\002\000\020" +
    "\006\uffc8\011\uffc8\022\uffc8\034\uffc8\045\uffc8\047\uffc8\112" +
    "\uffc8\001\002\000\020\006\uffc9\011\uffc9\022\uffc9\034\uffc9" +
    "\045\uffc9\047\uffc9\112\uffc9\001\002\000\024\030\047\055" +
    "\040\067\035\112\050\113\042\114\037\115\036\116\043" +
    "\117\044\001\002\000\024\030\047\055\040\067\035\112" +
    "\050\113\042\114\037\115\036\116\043\117\044\001\002" +
    "\000\062\004\uff85\014\uff85\015\uff85\017\uff85\027\uff85\032" +
    "\uff85\044\uff85\055\uff85\056\uff85\057\uff85\060\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\070\uff85\072\uff85\073" +
    "\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\001\002" +
    "\000\062\004\uff86\014\uff86\015\uff86\017\uff86\027\uff86\032" +
    "\uff86\044\uff86\055\uff86\056\uff86\057\uff86\060\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\066\uff86\070\uff86\072\uff86\073" +
    "\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\001\002" +
    "\000\024\030\047\055\040\067\035\112\050\113\042\114" +
    "\037\115\036\116\043\117\044\001\002\000\062\004\uff88" +
    "\014\uff88\015\uff88\017\uff88\027\uff88\032\uff88\044\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\062\uff88\063\uff88\064\uff88" +
    "\065\uff88\066\uff88\070\uff88\072\uff88\073\uff88\077\uff88\100" +
    "\uff88\101\uff88\102\uff88\103\uff88\001\002\000\062\004\uff87" +
    "\014\uff87\015\uff87\017\uff87\027\uff87\032\uff87\044\uff87\055" +
    "\uff87\056\uff87\057\uff87\060\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\066\uff87\070\uff87\072\uff87\073\uff87\077\uff87\100" +
    "\uff87\101\uff87\102\uff87\103\uff87\001\002\000\062\004\uff84" +
    "\014\uff84\015\uff84\017\uff84\027\uff84\032\uff84\044\uff84\055" +
    "\uff84\056\uff84\057\uff84\060\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\070\uff84\072\uff84\073\uff84\077\uff84\100" +
    "\uff84\101\uff84\102\uff84\103\uff84\001\002\000\062\004\uff83" +
    "\014\uff83\015\uff83\017\uff83\027\uff83\032\uff83\044\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\066\uff83\070\uff83\072\uff83\073\uff83\077\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\001\002\000\040\004\054" +
    "\014\065\027\062\032\072\055\055\056\056\057\060\060" +
    "\066\063\124\073\067\077\070\100\064\101\057\102\071" +
    "\103\061\001\002\000\062\004\uff80\014\uff80\015\uff80\017" +
    "\uff80\027\uff80\032\uff80\044\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066\uff80\070" +
    "\uff80\072\uff80\073\uff80\077\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\001\002\000\024\030\047\055\040\067\035\112" +
    "\050\113\042\114\037\115\036\116\043\117\044\001\002" +
    "\000\066\004\uff82\014\uff82\015\uff82\017\uff82\027\uff82\032" +
    "\uff82\044\uff82\055\uff82\056\uff82\057\uff82\060\uff82\062\uff82" +
    "\063\uff82\064\uff82\065\uff82\066\uff82\067\051\070\uff82\071" +
    "\052\072\uff82\073\uff82\077\uff82\100\uff82\101\uff82\102\uff82" +
    "\103\uff82\001\002\000\026\030\047\055\040\067\035\070" +
    "\117\112\050\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\024\030\047\055\040\067\035\112\050\113" +
    "\042\114\037\115\036\116\043\117\044\001\002\000\040" +
    "\004\054\014\065\027\062\032\072\055\055\056\056\057" +
    "\060\060\066\072\063\073\067\077\070\100\064\101\057" +
    "\102\071\103\061\001\002\000\026\030\047\043\112\055" +
    "\040\067\035\112\050\113\042\114\037\115\036\116\043" +
    "\117\044\001\002\000\024\030\047\055\040\067\035\112" +
    "\050\113\042\114\037\115\036\116\043\117\044\001\002" +
    "\000\024\030\047\055\040\067\035\112\050\113\042\114" +
    "\037\115\036\116\043\117\044\001\002\000\024\030\047" +
    "\055\040\067\035\112\050\113\042\114\037\115\036\116" +
    "\043\117\044\001\002\000\024\030\047\055\040\067\035" +
    "\112\050\113\042\114\037\115\036\116\043\117\044\001" +
    "\002\000\024\030\047\055\040\067\035\112\050\113\042" +
    "\114\037\115\036\116\043\117\044\001\002\000\024\030" +
    "\047\055\040\067\035\112\050\113\042\114\037\115\036" +
    "\116\043\117\044\001\002\000\062\004\uff81\014\uff81\015" +
    "\uff81\017\uff81\027\uff81\032\uff81\044\uff81\055\uff81\056\uff81" +
    "\057\uff81\060\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\070\uff81\072\uff81\073\uff81\077\uff81\100\uff81\101\uff81" +
    "\102\uff81\103\uff81\001\002\000\024\030\047\055\040\067" +
    "\035\112\050\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\024\030\047\055\040\067\035\112\050\113" +
    "\042\114\037\115\036\116\043\117\044\001\002\000\024" +
    "\030\047\055\040\067\035\112\050\113\042\114\037\115" +
    "\036\116\043\117\044\001\002\000\024\030\047\055\040" +
    "\067\035\112\050\113\042\114\037\115\036\116\043\117" +
    "\044\001\002\000\024\030\047\055\040\067\035\112\050" +
    "\113\042\114\037\115\036\116\043\117\044\001\002\000" +
    "\024\030\047\055\040\067\035\112\050\113\042\114\037" +
    "\115\036\116\043\117\044\001\002\000\026\017\074\030" +
    "\047\055\040\067\035\112\050\113\042\114\037\115\036" +
    "\116\043\117\044\001\002\000\062\004\054\014\065\015" +
    "\uff8e\017\uff8e\027\062\032\uff8e\044\uff8e\055\055\056\056" +
    "\057\060\060\066\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\070\uff8e\072\uff8e\073\067\077\070\100\064\101\057" +
    "\102\071\103\061\001\002\000\024\030\047\055\040\067" +
    "\035\112\050\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\062\004\054\014\065\015\uff8c\017\uff8c\027" +
    "\062\032\072\044\uff8c\055\055\056\056\057\060\060\066" +
    "\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\070\uff8c\072" +
    "\uff8c\073\067\077\070\100\064\101\057\102\071\103\061" +
    "\001\002\000\062\004\uff90\014\065\015\uff90\017\uff90\027" +
    "\062\032\uff90\044\uff90\055\055\056\056\057\060\060\066" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\070\uff90\072" +
    "\uff90\073\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\001\002\000\062\004\uff94\014\065\015\uff94\017\uff94\027" +
    "\062\032\uff94\044\uff94\055\055\056\056\057\060\060\066" +
    "\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\070\uff94\072" +
    "\uff94\073\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94" +
    "\001\002\000\062\004\uff95\014\065\015\uff95\017\uff95\027" +
    "\062\032\uff95\044\uff95\055\055\056\056\057\060\060\066" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070\uff95\072" +
    "\uff95\073\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95" +
    "\001\002\000\062\004\uff98\014\uff98\015\uff98\017\uff98\027" +
    "\uff98\032\uff98\044\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\070\uff98\072" +
    "\uff98\073\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98" +
    "\001\002\000\062\004\uff97\014\uff97\015\uff97\017\uff97\027" +
    "\uff97\032\uff97\044\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\070\uff97\072" +
    "\uff97\073\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97" +
    "\001\002\000\062\004\uff93\014\065\015\uff93\017\uff93\027" +
    "\062\032\uff93\044\uff93\055\055\056\056\057\060\060\066" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\070\uff93\072" +
    "\uff93\073\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93" +
    "\001\002\000\062\004\uff96\014\uff96\015\uff96\017\uff96\027" +
    "\uff96\032\uff96\044\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\070\uff96\072" +
    "\uff96\073\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96" +
    "\001\002\000\062\004\uff91\014\065\015\uff91\017\uff91\027" +
    "\062\032\uff91\044\uff91\055\055\056\056\057\060\060\066" +
    "\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\070\uff91\072" +
    "\uff91\073\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91" +
    "\001\002\000\062\004\uff99\014\uff99\015\uff99\017\uff99\027" +
    "\uff99\032\uff99\044\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\070\uff99\072" +
    "\uff99\073\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99" +
    "\001\002\000\062\004\uff92\014\065\015\uff92\017\uff92\027" +
    "\062\032\uff92\044\uff92\055\055\056\056\057\060\060\066" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\070\uff92\072" +
    "\uff92\073\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\001\002\000\062\004\uff9b\014\065\015\uff9b\017\uff9b\027" +
    "\062\032\uff9b\044\uff9b\055\uff9b\056\uff9b\057\060\060\066" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b\072" +
    "\uff9b\073\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\001\002\000\062\004\uff9a\014\065\015\uff9a\017\uff9a\027" +
    "\062\032\uff9a\044\uff9a\055\uff9a\056\uff9a\057\060\060\066" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\070\uff9a\072" +
    "\uff9a\073\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a" +
    "\001\002\000\024\030\047\055\040\067\035\112\050\113" +
    "\042\114\037\115\036\116\043\117\044\001\002\000\062" +
    "\004\uff8f\014\065\015\uff8f\017\uff8f\027\062\032\uff8f\044" +
    "\uff8f\055\055\056\056\057\060\060\066\062\uff8f\063\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\070\uff8f\072\uff8f\073\067\077" +
    "\070\100\064\101\057\102\071\103\061\001\002\000\062" +
    "\004\054\014\065\015\uff8d\017\uff8d\027\062\032\072\044" +
    "\uff8d\055\055\056\056\057\060\060\066\062\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\070\uff8d\072\uff8d\073\067\077" +
    "\070\100\064\101\057\102\071\103\061\001\002\000\042" +
    "\004\054\014\065\027\062\032\072\055\055\056\056\057" +
    "\060\060\066\062\uffe0\070\uffe0\073\067\077\070\100\064" +
    "\101\057\102\071\103\061\001\002\000\006\062\120\070" +
    "\121\001\002\000\062\004\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\027\uffe2\032\uffe2\044\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2" +
    "\072\uffe2\073\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\001\002\000\024\030\047\055\040\067\035\112\050" +
    "\113\042\114\037\115\036\116\043\117\044\001\002\000" +
    "\062\004\uffe3\014\uffe3\015\uffe3\017\uffe3\027\uffe3\032\uffe3" +
    "\044\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\072\uffe3\073\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\001\002\000" +
    "\042\004\054\014\065\027\062\032\072\055\055\056\056" +
    "\057\060\060\066\062\uffe1\070\uffe1\073\067\077\070\100" +
    "\064\101\057\102\071\103\061\001\002\000\062\004\uff8a" +
    "\014\uff8a\015\uff8a\017\uff8a\027\uff8a\032\uff8a\044\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\065\uff8a\066\uff8a\070\uff8a\072\uff8a\073\uff8a\077\uff8a\100" +
    "\uff8a\101\uff8a\102\uff8a\103\uff8a\001\002\000\020\006\uffc7" +
    "\011\uffc7\022\uffc7\034\uffc7\045\uffc7\047\uffc7\112\uffc7\001" +
    "\002\000\062\004\uff89\014\uff89\015\uff89\017\uff89\027\uff89" +
    "\032\uff89\044\uff89\055\uff89\056\uff89\057\uff89\060\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\070\uff89\072\uff89" +
    "\073\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\001" +
    "\002\000\040\004\054\014\065\027\062\032\072\055\055" +
    "\056\056\057\060\060\066\070\127\073\067\077\070\100" +
    "\064\101\057\102\071\103\061\001\002\000\062\004\uff8b" +
    "\014\uff8b\015\uff8b\017\uff8b\027\uff8b\032\uff8b\044\uff8b\055" +
    "\uff8b\056\uff8b\057\uff8b\060\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\070\uff8b\072\uff8b\073\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\001\002\000\006\017\uffa1" +
    "\063\uffa1\001\002\000\006\017\uffd5\063\uffd5\001\002\000" +
    "\004\067\275\001\002\000\006\017\uffd3\063\uffd3\001\002" +
    "\000\006\017\uffd8\063\uffd8\001\002\000\004\067\271\001" +
    "\002\000\006\017\uffd9\063\uffd9\001\002\000\004\064\270" +
    "\001\002\000\004\067\246\001\002\000\006\017\uffda\063" +
    "\uffda\001\002\000\006\017\uffdb\063\uffdb\001\002\000\006" +
    "\017\uffd6\063\uffd6\001\002\000\006\017\uffd4\063\uffd4\001" +
    "\002\000\006\017\uffa2\063\uffa2\001\002\000\004\067\217" +
    "\001\002\000\004\063\216\001\002\000\006\017\uffd2\063" +
    "\uffd2\001\002\000\010\061\205\067\051\071\206\001\002" +
    "\000\032\003\147\007\145\010\146\013\130\020\214\024" +
    "\140\040\156\041\161\050\132\052\135\054\155\112\151" +
    "\001\002\000\006\017\uffd7\063\uffd7\001\002\000\034\003" +
    "\uffde\007\uffde\010\uffde\013\uffde\020\uffde\024\uffde\040\uffde" +
    "\041\uffde\046\uffde\050\uffde\052\uffde\054\uffde\112\uffde\001" +
    "\002\000\004\112\175\001\002\000\030\003\147\007\145" +
    "\010\146\013\130\024\140\040\156\041\161\050\132\052" +
    "\135\054\155\112\151\001\002\000\006\017\uffdc\063\uffdc" +
    "\001\002\000\004\063\170\001\002\000\004\067\162\001" +
    "\002\000\024\030\047\055\040\067\035\112\050\113\042" +
    "\114\037\115\036\116\043\117\044\001\002\000\042\004" +
    "\054\014\065\027\062\032\072\055\055\056\056\057\060" +
    "\060\066\062\uff9c\070\uff9c\073\067\077\070\100\064\101" +
    "\057\102\071\103\061\001\002\000\006\062\165\070\166" +
    "\001\002\000\024\030\047\055\040\067\035\112\050\113" +
    "\042\114\037\115\036\116\043\117\044\001\002\000\006" +
    "\017\uff9e\063\uff9e\001\002\000\042\004\054\014\065\027" +
    "\062\032\072\055\055\056\056\057\060\060\066\062\uff9d" +
    "\070\uff9d\073\067\077\070\100\064\101\057\102\071\103" +
    "\061\001\002\000\056\003\uffdd\007\uffdd\010\uffdd\013\uffdd" +
    "\017\uffdd\020\uffdd\024\uffdd\030\uffdd\040\uffdd\041\uffdd\046" +
    "\uffdd\050\uffdd\052\uffdd\054\uffdd\055\uffdd\067\uffdd\112\uffdd" +
    "\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\001\002\000" +
    "\032\003\147\007\145\010\146\013\130\024\140\040\156" +
    "\041\161\046\172\050\132\052\135\054\155\112\151\001" +
    "\002\000\024\030\047\055\040\067\035\112\050\113\042" +
    "\114\037\115\036\116\043\117\044\001\002\000\034\003" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\020\uffdf\024\uffdf\040\uffdf" +
    "\041\uffdf\046\uffdf\050\uffdf\052\uffdf\054\uffdf\112\uffdf\001" +
    "\002\000\042\004\054\014\065\017\uffa3\027\062\032\072" +
    "\055\055\056\056\057\060\060\066\063\uffa3\073\067\077" +
    "\070\100\064\101\057\102\071\103\061\001\002\000\006" +
    "\061\205\071\206\001\002\000\004\044\177\001\002\000" +
    "\024\030\047\055\040\067\035\112\050\113\042\114\037" +
    "\115\036\116\043\117\044\001\002\000\040\004\054\014" +
    "\065\015\201\027\062\032\072\055\055\056\056\057\060" +
    "\060\066\073\067\077\070\100\064\101\057\102\071\103" +
    "\061\001\002\000\004\006\202\001\002\000\030\003\147" +
    "\007\145\010\146\013\130\024\140\040\156\041\161\050" +
    "\132\052\135\054\155\112\151\001\002\000\032\003\147" +
    "\007\145\010\146\013\130\020\204\024\140\040\156\041" +
    "\161\050\132\052\135\054\155\112\151\001\002\000\006" +
    "\017\uffa4\063\uffa4\001\002\000\024\030\047\055\040\067" +
    "\035\112\050\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\024\030\047\055\040\067\035\112\050\113" +
    "\042\114\037\115\036\116\043\117\044\001\002\000\040" +
    "\004\054\014\065\027\062\032\072\055\055\056\056\057" +
    "\060\060\066\072\210\073\067\077\070\100\064\101\057" +
    "\102\071\103\061\001\002\000\004\061\211\001\002\000" +
    "\024\030\047\055\040\067\035\112\050\113\042\114\037" +
    "\115\036\116\043\117\044\001\002\000\044\004\054\014" +
    "\065\017\uffb3\027\062\032\072\044\uffb3\055\055\056\056" +
    "\057\060\060\066\063\uffb3\073\067\077\070\100\064\101" +
    "\057\102\071\103\061\001\002\000\044\004\054\014\065" +
    "\017\uffb4\027\062\032\072\044\uffb4\055\055\056\056\057" +
    "\060\060\066\063\uffb4\073\067\077\070\100\064\101\057" +
    "\102\071\103\061\001\002\000\004\064\215\001\002\000" +
    "\022\002\ufffb\003\ufffb\006\ufffb\011\ufffb\022\ufffb\034\ufffb" +
    "\045\ufffb\047\ufffb\001\002\000\006\017\uffd1\063\uffd1\001" +
    "\002\000\024\030\047\055\040\067\035\112\050\113\042" +
    "\114\037\115\036\116\043\117\044\001\002\000\040\004" +
    "\054\014\065\027\062\032\072\055\055\056\056\057\060" +
    "\060\066\070\221\073\067\077\070\100\064\101\057\102" +
    "\071\103\061\001\002\000\004\031\222\001\002\000\024" +
    "\030\047\055\040\067\035\112\050\113\042\114\037\115" +
    "\036\116\043\117\044\001\002\000\030\017\uffa8\020\uffa8" +
    "\030\uffa8\055\uffa8\067\uffa8\112\uffa8\113\uffa8\114\uffa8\115" +
    "\uffa8\116\uffa8\117\uffa8\001\002\000\030\017\235\020\236" +
    "\030\047\055\040\067\035\112\050\113\042\114\037\115" +
    "\036\116\043\117\044\001\002\000\040\004\054\014\065" +
    "\027\062\032\072\055\055\056\056\057\060\060\066\066" +
    "\226\073\067\077\070\100\064\101\057\102\071\103\061" +
    "\001\002\000\032\003\147\006\227\007\145\010\146\013" +
    "\130\024\140\040\156\041\161\050\132\052\135\054\155" +
    "\112\151\001\002\000\030\003\147\007\145\010\146\013" +
    "\130\024\140\040\156\041\161\050\132\052\135\054\155" +
    "\112\151\001\002\000\030\017\uffa7\020\uffa7\030\uffa7\055" +
    "\uffa7\067\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7" +
    "\117\uffa7\001\002\000\032\003\147\007\145\010\146\013" +
    "\130\020\232\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\004\063\233\001\002\000" +
    "\030\017\uffa6\020\uffa6\030\uffa6\055\uffa6\067\uffa6\112\uffa6" +
    "\113\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\001\002\000" +
    "\030\017\uffa9\020\uffa9\030\uffa9\055\uffa9\067\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\001\002\000" +
    "\032\003\147\006\237\007\145\010\146\013\130\024\140" +
    "\040\156\041\161\050\132\052\135\054\155\112\151\001" +
    "\002\000\006\017\uffaa\063\uffaa\001\002\000\030\003\147" +
    "\007\145\010\146\013\130\024\140\040\156\041\161\050" +
    "\132\052\135\054\155\112\151\001\002\000\004\020\241" +
    "\001\002\000\006\017\uffac\063\uffac\001\002\000\032\003" +
    "\147\007\145\010\146\013\130\020\243\024\140\040\156" +
    "\041\161\050\132\052\135\054\155\112\151\001\002\000" +
    "\004\063\244\001\002\000\004\020\245\001\002\000\006" +
    "\017\uffab\063\uffab\001\002\000\024\030\047\055\040\067" +
    "\035\112\050\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\040\004\054\014\065\027\062\032\072\055" +
    "\055\056\056\057\060\060\066\070\250\073\067\077\070" +
    "\100\064\101\057\102\071\103\061\001\002\000\004\043" +
    "\251\001\002\000\032\003\147\006\252\007\145\010\146" +
    "\013\130\024\140\040\156\041\161\050\132\052\135\054" +
    "\155\112\151\001\002\000\030\003\147\007\145\010\146" +
    "\013\130\024\140\040\156\041\161\050\132\052\135\054" +
    "\155\112\151\001\002\000\006\017\254\063\uffb2\001\002" +
    "\000\032\003\147\006\255\007\145\010\146\013\130\024" +
    "\140\040\156\041\161\050\132\052\135\054\155\112\151" +
    "\001\002\000\030\003\147\007\145\010\146\013\130\024" +
    "\140\040\156\041\161\050\132\052\135\054\155\112\151" +
    "\001\002\000\006\017\uffb0\063\uffb0\001\002\000\032\003" +
    "\147\007\145\010\146\013\130\020\260\024\140\040\156" +
    "\041\161\050\132\052\135\054\155\112\151\001\002\000" +
    "\006\017\uffaf\063\uffaf\001\002\000\032\003\147\007\145" +
    "\010\146\013\130\020\262\024\140\040\156\041\161\050" +
    "\132\052\135\054\155\112\151\001\002\000\006\017\263" +
    "\063\uffb1\001\002\000\032\003\147\006\264\007\145\010" +
    "\146\013\130\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\030\003\147\007\145\010" +
    "\146\013\130\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\006\017\uffae\063\uffae\001" +
    "\002\000\032\003\147\007\145\010\146\013\130\020\267" +
    "\024\140\040\156\041\161\050\132\052\135\054\155\112" +
    "\151\001\002\000\006\017\uffad\063\uffad\001\002\000\022" +
    "\002\ufffa\003\ufffa\006\ufffa\011\ufffa\022\ufffa\034\ufffa\045" +
    "\ufffa\047\ufffa\001\002\000\026\030\047\055\040\067\035" +
    "\070\272\112\050\113\042\114\037\115\036\116\043\117" +
    "\044\001\002\000\006\017\uff9f\063\uff9f\001\002\000\006" +
    "\062\165\070\274\001\002\000\006\017\uffa0\063\uffa0\001" +
    "\002\000\024\030\047\055\040\067\035\112\050\113\042" +
    "\114\037\115\036\116\043\117\044\001\002\000\040\004" +
    "\054\014\065\027\062\032\072\055\055\056\056\057\060" +
    "\060\066\070\277\073\067\077\070\100\064\101\057\102" +
    "\071\103\061\001\002\000\004\015\300\001\002\000\004" +
    "\006\301\001\002\000\030\003\147\007\145\010\146\013" +
    "\130\024\140\040\156\041\161\050\132\052\135\054\155" +
    "\112\151\001\002\000\032\003\147\007\145\010\146\013" +
    "\130\020\303\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\006\017\uffa5\063\uffa5\001" +
    "\002\000\004\067\305\001\002\000\010\047\306\070\307" +
    "\112\311\001\002\000\004\112\311\001\002\000\004\066" +
    "\346\001\002\000\006\063\330\070\327\001\002\000\010" +
    "\062\uffb5\066\uffb5\073\uffb5\001\002\000\006\062\315\066" +
    "\316\001\002\000\010\062\uffb6\066\uffb6\073\uffb6\001\002" +
    "\000\006\063\uffe8\070\uffe8\001\002\000\004\112\311\001" +
    "\002\000\016\012\321\037\322\053\317\105\320\106\324" +
    "\112\323\001\002\000\010\063\uff7f\070\uff7f\073\uff7f\001" +
    "\002\000\010\063\uff7c\070\uff7c\073\uff7c\001\002\000\010" +
    "\063\uff7b\070\uff7b\073\uff7b\001\002\000\010\063\uff7e\070" +
    "\uff7e\073\uff7e\001\002\000\006\063\uffe4\070\uffe4\001\002" +
    "\000\010\063\uff7d\070\uff7d\073\uff7d\001\002\000\006\063" +
    "\uffe5\070\uffe5\001\002\000\010\062\uffb7\066\uffb7\073\uffb7" +
    "\001\002\000\004\066\332\001\002\000\006\047\306\112" +
    "\311\001\002\000\006\063\uffe9\070\uffe9\001\002\000\014" +
    "\012\321\037\322\053\317\105\320\106\324\001\002\000" +
    "\004\063\334\001\002\000\006\006\336\047\014\001\002" +
    "\000\004\006\342\001\002\000\030\003\147\007\145\010" +
    "\146\013\130\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\032\003\147\007\145\010" +
    "\146\013\130\020\340\024\140\040\156\041\161\050\132" +
    "\052\135\054\155\112\151\001\002\000\004\063\341\001" +
    "\002\000\016\006\uffef\011\uffef\022\uffef\034\uffef\045\uffef" +
    "\047\uffef\001\002\000\030\003\147\007\145\010\146\013" +
    "\130\024\140\040\156\041\161\050\132\052\135\054\155" +
    "\112\151\001\002\000\032\003\147\007\145\010\146\013" +
    "\130\020\344\024\140\040\156\041\161\050\132\052\135" +
    "\054\155\112\151\001\002\000\004\063\345\001\002\000" +
    "\016\006\ufff1\011\ufff1\022\ufff1\034\ufff1\045\ufff1\047\ufff1" +
    "\001\002\000\014\012\321\037\322\053\317\105\320\106" +
    "\324\001\002\000\004\063\350\001\002\000\006\006\352" +
    "\047\014\001\002\000\004\006\356\001\002\000\030\003" +
    "\147\007\145\010\146\013\130\024\140\040\156\041\161" +
    "\050\132\052\135\054\155\112\151\001\002\000\032\003" +
    "\147\007\145\010\146\013\130\020\354\024\140\040\156" +
    "\041\161\050\132\052\135\054\155\112\151\001\002\000" +
    "\004\063\355\001\002\000\016\006\uffee\011\uffee\022\uffee" +
    "\034\uffee\045\uffee\047\uffee\001\002\000\030\003\147\007" +
    "\145\010\146\013\130\024\140\040\156\041\161\050\132" +
    "\052\135\054\155\112\151\001\002\000\032\003\147\007" +
    "\145\010\146\013\130\020\360\024\140\040\156\041\161" +
    "\050\132\052\135\054\155\112\151\001\002\000\004\063" +
    "\361\001\002\000\016\006\ufff0\011\ufff0\022\ufff0\034\ufff0" +
    "\045\ufff0\047\ufff0\001\002\000\006\062\315\066\363\001" +
    "\002\000\016\012\321\037\322\053\317\105\320\106\324" +
    "\112\364\001\002\000\006\063\uffe6\070\uffe6\001\002\000" +
    "\006\063\uffe7\070\uffe7\001\002\000\016\006\ufff9\011\ufff9" +
    "\022\ufff9\034\ufff9\045\ufff9\047\ufff9\001\002\000\032\003" +
    "\147\007\145\010\146\013\130\020\370\024\140\040\156" +
    "\041\161\050\132\052\135\054\155\112\151\001\002\000" +
    "\004\064\374\001\002\000\032\003\147\007\145\010\146" +
    "\013\130\020\372\024\140\040\156\041\161\050\132\052" +
    "\135\054\155\112\151\001\002\000\004\064\373\001\002" +
    "\000\022\002\ufffd\003\ufffd\006\ufffd\011\ufffd\022\ufffd\034" +
    "\ufffd\045\ufffd\047\ufffd\001\002\000\022\002\ufffc\003\ufffc" +
    "\006\ufffc\011\ufffc\022\ufffc\034\ufffc\045\ufffc\047\ufffc\001" +
    "\002\000\016\006\ufff7\011\ufff7\022\ufff7\034\ufff7\045\ufff7" +
    "\047\ufff7\001\002\000\020\006\uffce\011\uffce\022\uffce\034" +
    "\uffce\045\uffce\047\uffce\112\uffce\001\002\000\006\062\315" +
    "\073\u0102\001\002\000\020\006\uffd0\011\uffd0\022\uffd0\034" +
    "\uffd0\045\uffd0\047\uffd0\112\311\001\002\000\020\006\uffcf" +
    "\011\uffcf\022\uffcf\034\uffcf\045\uffcf\047\uffcf\112\uffcf\001" +
    "\002\000\040\005\u0105\012\321\030\047\037\322\053\317" +
    "\055\040\067\035\105\320\106\324\112\050\113\042\114" +
    "\037\115\036\116\043\117\044\001\002\000\004\063\u0112" +
    "\001\002\000\040\004\054\014\065\027\062\032\072\055" +
    "\055\056\056\057\060\060\066\065\u010f\073\067\077\070" +
    "\100\064\101\057\102\071\103\061\001\002\000\004\071" +
    "\u0106\001\002\000\024\030\047\055\040\067\035\112\050" +
    "\113\042\114\037\115\036\116\043\117\044\001\002\000" +
    "\040\004\054\014\065\027\062\032\072\055\055\056\056" +
    "\057\060\060\066\064\u0108\073\067\077\070\100\064\101" +
    "\057\102\071\103\061\001\002\000\004\064\u0109\001\002" +
    "\000\024\030\047\055\040\067\035\112\050\113\042\114" +
    "\037\115\036\116\043\117\044\001\002\000\040\004\054" +
    "\014\065\027\062\032\072\055\055\056\056\057\060\060" +
    "\066\072\u010b\073\067\077\070\100\064\101\057\102\071" +
    "\103\061\001\002\000\004\031\u010c\001\002\000\014\012" +
    "\321\037\322\053\317\105\320\106\324\001\002\000\004" +
    "\063\u010e\001\002\000\020\006\uffcb\011\uffcb\022\uffcb\034" +
    "\uffcb\045\uffcb\047\uffcb\112\uffcb\001\002\000\024\030\047" +
    "\055\040\067\035\112\050\113\042\114\037\115\036\116" +
    "\043\117\044\001\002\000\040\004\054\014\065\027\062" +
    "\032\072\055\055\056\056\057\060\060\066\063\u0111\073" +
    "\067\077\070\100\064\101\057\102\071\103\061\001\002" +
    "\000\020\006\uffcc\011\uffcc\022\uffcc\034\uffcc\045\uffcc\047" +
    "\uffcc\112\uffcc\001\002\000\020\006\uffcd\011\uffcd\022\uffcd" +
    "\034\uffcd\045\uffcd\047\uffcd\112\uffcd\001\002\000\020\006" +
    "\uffc4\011\uffc4\022\uffc4\034\uffc4\045\uffc4\047\uffc4\112\uffc4" +
    "\001\002\000\006\062\315\066\u0117\001\002\000\020\006" +
    "\uffc6\011\uffc6\022\uffc6\034\uffc6\045\uffc6\047\uffc6\112\311" +
    "\001\002\000\020\006\uffc5\011\uffc5\022\uffc5\034\uffc5\045" +
    "\uffc5\047\uffc5\112\uffc5\001\002\000\040\005\u011b\012\321" +
    "\030\047\037\322\053\317\055\040\067\035\105\320\106" +
    "\324\112\u011a\113\042\114\037\115\036\116\043\117\044" +
    "\001\002\000\006\063\u012b\073\u012c\001\002\000\040\004" +
    "\054\014\065\027\062\032\072\055\055\056\056\057\060" +
    "\060\066\065\u0128\073\067\077\070\100\064\101\057\102" +
    "\071\103\061\001\002\000\046\004\uff82\014\uff82\027\uff82" +
    "\032\uff82\055\uff82\056\uff82\057\uff82\060\uff82\063\u0127\065" +
    "\uff82\067\051\071\052\073\uff82\077\uff82\100\uff82\101\uff82" +
    "\102\uff82\103\uff82\001\002\000\004\071\u011c\001\002\000" +
    "\024\030\047\055\040\067\035\112\050\113\042\114\037" +
    "\115\036\116\043\117\044\001\002\000\040\004\054\014" +
    "\065\027\062\032\072\055\055\056\056\057\060\060\066" +
    "\064\u011e\073\067\077\070\100\064\101\057\102\071\103" +
    "\061\001\002\000\004\064\u011f\001\002\000\024\030\047" +
    "\055\040\067\035\112\050\113\042\114\037\115\036\116" +
    "\043\117\044\001\002\000\040\004\054\014\065\027\062" +
    "\032\072\055\055\056\056\057\060\060\066\072\u0121\073" +
    "\067\077\070\100\064\101\057\102\071\103\061\001\002" +
    "\000\004\031\u0122\001\002\000\016\012\321\037\322\053" +
    "\317\105\320\106\324\112\u0123\001\002\000\004\063\u0126" +
    "\001\002\000\004\063\u0125\001\002\000\020\006\uffbf\011" +
    "\uffbf\022\uffbf\034\uffbf\045\uffbf\047\uffbf\112\uffbf\001\002" +
    "\000\020\006\uffbe\011\uffbe\022\uffbe\034\uffbe\045\uffbe\047" +
    "\uffbe\112\uffbe\001\002\000\020\006\uffc1\011\uffc1\022\uffc1" +
    "\034\uffc1\045\uffc1\047\uffc1\112\uffc1\001\002\000\024\030" +
    "\047\055\040\067\035\112\050\113\042\114\037\115\036" +
    "\116\043\117\044\001\002\000\040\004\054\014\065\027" +
    "\062\032\072\055\055\056\056\057\060\060\066\063\u012a" +
    "\073\067\077\070\100\064\101\057\102\071\103\061\001" +
    "\002\000\020\006\uffc0\011\uffc0\022\uffc0\034\uffc0\045\uffc0" +
    "\047\uffc0\112\uffc0\001\002\000\020\006\uffc3\011\uffc3\022" +
    "\uffc3\034\uffc3\045\uffc3\047\uffc3\112\uffc3\001\002\000\024" +
    "\030\047\055\040\067\035\112\050\113\042\114\037\115" +
    "\036\116\043\117\044\001\002\000\040\004\054\014\065" +
    "\027\062\032\072\055\055\056\056\057\060\060\066\063" +
    "\u012e\073\067\077\070\100\064\101\057\102\071\103\061" +
    "\001\002\000\020\006\uffc2\011\uffc2\022\uffc2\034\uffc2\045" +
    "\uffc2\047\uffc2\112\uffc2\001\002\000\004\067\u0130\001\002" +
    "\000\010\047\306\070\u0131\112\311\001\002\000\004\063" +
    "\u013e\001\002\000\006\063\330\070\u0133\001\002\000\004" +
    "\063\u0134\001\002\000\006\006\u0136\047\014\001\002\000" +
    "\004\006\u013a\001\002\000\030\003\147\007\145\010\146" +
    "\013\130\024\140\040\156\041\161\050\132\052\135\054" +
    "\155\112\151\001\002\000\032\003\147\007\145\010\146" +
    "\013\130\020\u0138\024\140\040\156\041\161\050\132\052" +
    "\135\054\155\112\151\001\002\000\004\063\u0139\001\002" +
    "\000\016\006\uffeb\011\uffeb\022\uffeb\034\uffeb\045\uffeb\047" +
    "\uffeb\001\002\000\030\003\147\007\145\010\146\013\130" +
    "\024\140\040\156\041\161\050\132\052\135\054\155\112" +
    "\151\001\002\000\032\003\147\007\145\010\146\013\130" +
    "\020\u013c\024\140\040\156\041\161\050\132\052\135\054" +
    "\155\112\151\001\002\000\004\063\u013d\001\002\000\016" +
    "\006\uffed\011\uffed\022\uffed\034\uffed\045\uffed\047\uffed\001" +
    "\002\000\006\006\u0140\047\014\001\002\000\004\006\u0144" +
    "\001\002\000\030\003\147\007\145\010\146\013\130\024" +
    "\140\040\156\041\161\050\132\052\135\054\155\112\151" +
    "\001\002\000\032\003\147\007\145\010\146\013\130\020" +
    "\u0142\024\140\040\156\041\161\050\132\052\135\054\155" +
    "\112\151\001\002\000\004\063\u0143\001\002\000\016\006" +
    "\uffea\011\uffea\022\uffea\034\uffea\045\uffea\047\uffea\001\002" +
    "\000\030\003\147\007\145\010\146\013\130\024\140\040" +
    "\156\041\161\050\132\052\135\054\155\112\151\001\002" +
    "\000\032\003\147\007\145\010\146\013\130\020\u0146\024" +
    "\140\040\156\041\161\050\132\052\135\054\155\112\151" +
    "\001\002\000\004\063\u0147\001\002\000\016\006\uffec\011" +
    "\uffec\022\uffec\034\uffec\045\uffec\047\uffec\001\002\000\022" +
    "\002\uffff\003\uffff\006\uffff\011\uffff\022\uffff\034\uffff\045" +
    "\uffff\047\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\021\004\010" +
    "\007\024\010\007\020\020\021\012\030\022\033\016\036" +
    "\014\001\001\000\002\001\001\000\022\003\021\007\024" +
    "\010\u0147\020\020\021\012\030\022\033\016\036\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\u0114" +
    "\040\u0112\044\u0113\045\312\001\001\000\002\001\001\000" +
    "\012\031\377\032\375\044\376\045\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\365\020\020\021\012\030\022\033\016\036\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\151\011\153\012\133\026\157\051\143\052\156" +
    "\053\141\054\147\055\132\056\140\057\135\060\152\061" +
    "\142\062\130\001\001\000\006\034\030\035\031\001\001" +
    "\000\002\001\001\000\004\035\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\044\051\045\063\040" +
    "\001\001\000\010\046\125\051\045\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\124\051\045" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\122\051\045\063\040\001\001\000" +
    "\002\001\001\000\012\006\115\046\114\051\045\063\040" +
    "\001\001\000\010\046\052\051\045\063\040\001\001\000" +
    "\002\001\001\000\010\046\112\051\045\063\040\001\001" +
    "\000\010\046\110\051\045\063\040\001\001\000\010\046" +
    "\107\051\045\063\040\001\001\000\010\046\106\051\045" +
    "\063\040\001\001\000\010\046\105\051\045\063\040\001" +
    "\001\000\010\046\104\051\045\063\040\001\001\000\010" +
    "\046\103\051\045\063\040\001\001\000\002\001\001\000" +
    "\010\046\102\051\045\063\040\001\001\000\010\046\101" +
    "\051\045\063\040\001\001\000\010\046\100\051\045\063" +
    "\040\001\001\000\010\046\077\051\045\063\040\001\001" +
    "\000\010\046\076\051\045\063\040\001\001\000\010\046" +
    "\075\051\045\063\040\001\001\000\010\046\072\051\045" +
    "\063\040\001\001\000\002\001\001\000\010\046\074\051" +
    "\045\063\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\113\051\045\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\121" +
    "\051\045\063\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\172\012\133\026\157\051\143\052" +
    "\156\053\141\054\147\055\132\056\140\057\135\060\152" +
    "\061\142\062\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\175\001\001\000\036\005\170\011\153" +
    "\012\133\026\157\051\143\052\156\053\141\054\147\055" +
    "\132\056\140\057\135\060\152\061\142\062\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\162\050\163\051\045\063\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\166\051\045\063" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\172\012\133\026\157\051\143\052" +
    "\156\053\141\054\147\055\132\056\140\057\135\060\152" +
    "\061\142\062\130\001\001\000\010\046\173\051\045\063" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\177\051\045\063" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\202\011\153\012\133\026\157\051\143\052\156\053" +
    "\141\054\147\055\132\056\140\057\135\060\152\061\142" +
    "\062\130\001\001\000\034\011\172\012\133\026\157\051" +
    "\143\052\156\053\141\054\147\055\132\056\140\057\135" +
    "\060\152\061\142\062\130\001\001\000\002\001\001\000" +
    "\010\046\212\051\045\063\040\001\001\000\010\046\206" +
    "\051\045\063\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\211\051\045\063\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\217\051\045\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\223\025\222\046\224\051\045\063\040\001\001\000\002" +
    "\001\001\000\012\025\233\046\224\051\045\063\040\001" +
    "\001\000\002\001\001\000\034\011\227\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\036\005\230" +
    "\011\153\012\133\026\157\051\143\052\156\053\141\054" +
    "\147\055\132\056\140\057\135\060\152\061\142\062\130" +
    "\001\001\000\002\001\001\000\034\011\172\012\133\026" +
    "\157\051\143\052\156\053\141\054\147\055\132\056\140" +
    "\057\135\060\152\061\142\062\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\237" +
    "\012\133\026\157\051\143\052\156\053\141\054\147\055" +
    "\132\056\140\057\135\060\152\061\142\062\130\001\001" +
    "\000\002\001\001\000\036\005\241\011\153\012\133\026" +
    "\157\051\143\052\156\053\141\054\147\055\132\056\140" +
    "\057\135\060\152\061\142\062\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\172\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\246\051" +
    "\045\063\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\133\026\252\051\143\052\156\053\141\054" +
    "\147\055\132\056\140\057\135\060\152\061\142\062\130" +
    "\001\001\000\036\005\260\011\153\012\133\026\157\051" +
    "\143\052\156\053\141\054\147\055\132\056\140\057\135" +
    "\060\152\061\142\062\130\001\001\000\002\001\001\000" +
    "\032\012\133\026\255\051\143\052\156\053\141\054\147" +
    "\055\132\056\140\057\135\060\152\061\142\062\130\001" +
    "\001\000\036\005\256\011\153\012\133\026\157\051\143" +
    "\052\156\053\141\054\147\055\132\056\140\057\135\060" +
    "\152\061\142\062\130\001\001\000\002\001\001\000\034" +
    "\011\172\012\133\026\157\051\143\052\156\053\141\054" +
    "\147\055\132\056\140\057\135\060\152\061\142\062\130" +
    "\001\001\000\002\001\001\000\034\011\172\012\133\026" +
    "\157\051\143\052\156\053\141\054\147\055\132\056\140" +
    "\057\135\060\152\061\142\062\130\001\001\000\002\001" +
    "\001\000\032\012\133\026\264\051\143\052\156\053\141" +
    "\054\147\055\132\056\140\057\135\060\152\061\142\062" +
    "\130\001\001\000\036\005\265\011\153\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\002\001\001" +
    "\000\034\011\172\012\133\026\157\051\143\052\156\053" +
    "\141\054\147\055\132\056\140\057\135\060\152\061\142" +
    "\062\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\162\050\272\051\045\063\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\275\051\045\063\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\301\011\153\012" +
    "\133\026\157\051\143\052\156\053\141\054\147\055\132" +
    "\056\140\057\135\060\152\061\142\062\130\001\001\000" +
    "\034\011\172\012\133\026\157\051\143\052\156\053\141" +
    "\054\147\055\132\056\140\057\135\060\152\061\142\062" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\307\023\313\044\311\045\312\001\001\000\006\044" +
    "\361\045\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\325\001\001\000\004\064\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\330\044\311\045\312\001\001\000\002\001\001" +
    "\000\004\064\332\001\001\000\002\001\001\000\004\036" +
    "\334\001\001\000\002\001\001\000\036\005\336\011\153" +
    "\012\133\026\157\051\143\052\156\053\141\054\147\055" +
    "\132\056\140\057\135\060\152\061\142\062\130\001\001" +
    "\000\034\011\172\012\133\026\157\051\143\052\156\053" +
    "\141\054\147\055\132\056\140\057\135\060\152\061\142" +
    "\062\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\342\011\153\012\133\026\157\051\143\052\156" +
    "\053\141\054\147\055\132\056\140\057\135\060\152\061" +
    "\142\062\130\001\001\000\034\011\172\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\346\001\001\000\002\001" +
    "\001\000\004\036\350\001\001\000\002\001\001\000\036" +
    "\005\352\011\153\012\133\026\157\051\143\052\156\053" +
    "\141\054\147\055\132\056\140\057\135\060\152\061\142" +
    "\062\130\001\001\000\034\011\172\012\133\026\157\051" +
    "\143\052\156\053\141\054\147\055\132\056\140\057\135" +
    "\060\152\061\142\062\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\356\011\153\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\034\011\172" +
    "\012\133\026\157\051\143\052\156\053\141\054\147\055" +
    "\132\056\140\057\135\060\152\061\142\062\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\370\011\153\012\133\026" +
    "\157\051\143\052\156\053\141\054\147\055\132\056\140" +
    "\057\135\060\152\061\142\062\130\001\001\000\002\001" +
    "\001\000\034\011\172\012\133\026\157\051\143\052\156" +
    "\053\141\054\147\055\132\056\140\057\135\060\152\061" +
    "\142\062\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\u0100\044\376\045\312\001\001" +
    "\000\002\001\001\000\012\046\u0103\051\045\063\040\064" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\u0106\051\045\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\u0109\051\045" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\u010f\051\045\063\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\u0115\044\u0113\045\312\001" +
    "\001\000\002\001\001\000\012\046\u0118\051\045\063\040" +
    "\064\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\u011c\051\045" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\u011f\051\045\063\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\u0128\051\045\063\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\u012c\051\045\063\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\u0131" +
    "\023\313\044\311\045\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\u0134\001\001" +
    "\000\002\001\001\000\036\005\u0136\011\153\012\133\026" +
    "\157\051\143\052\156\053\141\054\147\055\132\056\140" +
    "\057\135\060\152\061\142\062\130\001\001\000\034\011" +
    "\172\012\133\026\157\051\143\052\156\053\141\054\147" +
    "\055\132\056\140\057\135\060\152\061\142\062\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\u013a" +
    "\011\153\012\133\026\157\051\143\052\156\053\141\054" +
    "\147\055\132\056\140\057\135\060\152\061\142\062\130" +
    "\001\001\000\034\011\172\012\133\026\157\051\143\052" +
    "\156\053\141\054\147\055\132\056\140\057\135\060\152" +
    "\061\142\062\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u013e\001\001\000\002\001\001\000\036" +
    "\005\u0140\011\153\012\133\026\157\051\143\052\156\053" +
    "\141\054\147\055\132\056\140\057\135\060\152\061\142" +
    "\062\130\001\001\000\034\011\172\012\133\026\157\051" +
    "\143\052\156\053\141\054\147\055\132\056\140\057\135" +
    "\060\152\061\142\062\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\u0144\011\153\012\133\026\157" +
    "\051\143\052\156\053\141\054\147\055\132\056\140\057" +
    "\135\060\152\061\142\062\130\001\001\000\034\011\172" +
    "\012\133\026\157\051\143\052\156\053\141\054\147\055" +
    "\132\056\140\057\135\060\152\061\142\062\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer){
    super(lexer);
    }

    public List<ErrorPascal> listaErrores = new ArrayList<>();

    public void syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value) + " lin,col: " +s.left +" "+s.right;
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.RECUPERABLE.name(), description, s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value);
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.IRECUPERABLE.name(), description, s.left, s.right));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // data_type ::= TKCHAR 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // data_type ::= STRING 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CADENA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // data_type ::= REAL 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // data_type ::= INTEGER 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.ENTERO; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= llamada_funcion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= IDENTIFICADOR COR_A expresion COR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoArray(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= IDENTIFICADOR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Acceso(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= FALSE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(false, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= TRUE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(true, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= CADENA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(a, new Tipo(DataType.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= DECIMAL 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Double.parseDouble(a), new Tipo(DataType.REAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= ENTERO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Integer.parseInt(a), new Tipo(DataType.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= valor 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unario(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= NOT expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NOT(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= PAR_A expresion PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion OR ELSE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrElse(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion AND THEN expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndThen(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= expresion OR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OR(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= expresion AND expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MenorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MayorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion MENOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Menor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion MAYOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mayor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= expresion DIFERENTE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Diferente(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion IGUALACION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Igual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion MOD expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion DIV expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion DIVISION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion MULTI expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Resta(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion SUMA expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Suma(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_write ::= expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_write ::= parametros_write COMA expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // readline ::= READLN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Readline(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readline",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // writeline ::= WRITELN PAR_A PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteLine(new ArrayList<Sentencia>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeline",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // writeline ::= WRITELN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteLine(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeline",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // s_continue ::= CONTINUE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenciaContinue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_continue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // s_break ::= BREAK 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenciaBreak(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_break",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // repeat_until ::= REPEAT bloque_codigo UNTIL expresion 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RepeatUntil(a, b, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_until",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia_for ::= FOR asignacion TO expresion DO BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaFor(a, b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_while ::= WHILE PAR_A expresion PAR_C DO BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaWhile(a, b, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // caso ::= expresion DOS_PUNTOS BEGIN bloque_codigo END PUNTO_COMA 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caso ::= expresion DOS_PUNTOS stament_bloque 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Caso> a = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaCase(a, b, null, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos ELSE BEGIN bloque_codigo END PUNTO_COMA END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos ELSE stament_bloque END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, null, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignacion ::= IDENTIFICADOR COR_A expresion COR_C IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignacionArray(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignacion(a, e, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // id_variable ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ids_variables ::= id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ids_variables ::= ids_variables COMA id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributo_record ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributo_record ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributo_record ::= ids_variables DOS_PUNTOS PACKED ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atributos_record ::= atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord a = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // atributos_record ::= atributos_record atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<AtributoRecord> a = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord b = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_record ::= VAR IDENTIFICADOR DOS_PUNTOS RECORD atributos_record END PUNTO_COMA 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<AtributoRecord> b = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_record",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(5, ids, e1, e2, id, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(4, ids, e1, e2, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable ::= ids_variables DOS_PUNTOS expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(3, ids, e1, e2, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(2, ids, a, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= ids_variables DOS_PUNTOS data_type IGUALACION expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), e, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variables ::= variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variables ::= variables variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> a = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable b = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_variable ::= VAR variables 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Variable> b = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constante ::= IDENTIFICADOR IGUALACION expresion PUNTO_COMA 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ex = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constante(id, ex, idleft, idright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constantes ::= constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante a = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constantes ::= constantes constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constante> a = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante b = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_contantes ::= CONST constantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Constante> b = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionConstante(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_contantes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= ids_variables IGUALACION ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo(DataType.ARRAY), new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= ids_variables IGUALACION expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo("", DataType.SUBRANGO), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= ids_variables IGUALACION data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType d = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, new Tipo(d), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipos ::= tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo a = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipos ::= tipos tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo b = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_tipos ::= TYPE tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionTipos(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // un_stament ::= error PUNTO_COMA 
            {
              Sentencia RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // un_stament ::= s_break 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // un_stament ::= s_continue 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // un_stament ::= llamada_funcion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // un_stament ::= repeat_until 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // un_stament ::= sentencia_for 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // un_stament ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // un_stament ::= setencia_case 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // un_stament ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // un_stament ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // un_stament ::= readline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // un_stament ::= writeline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stament_bloque ::= un_stament PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque_codigo ::= stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque_codigo ::= bloque_codigo stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list_params ::= expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_params ::= list_params COMA expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamada_funcion ::= IDENTIFICADOR PAR_A PAR_C 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LlamadaFuncion(i, new ArrayList<Sentencia>(), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamada_funcion ::= IDENTIFICADOR PAR_A list_params PAR_C 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LlamadaFuncion(i, a, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= ids_variables DOS_PUNTOS IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, DataType.PERSONALIZADO, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametro ::= ids_variables DOS_PUNTOS data_type 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, b, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametro ::= VAR ids_variables DOS_PUNTOS IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, DataType.PERSONALIZADO, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametro ::= VAR ids_variables DOS_PUNTOS data_type 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, b, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= parametros PUNTO_COMA parametro 
            {
              List<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A PAR_C PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), null, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A parametros PAR_C PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(DataType.ANY), null, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A PAR_C PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A parametros PAR_C PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(DataType.ANY), b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funciones ::= FUNCTION IDENTIFICADOR PAR_A PAR_C DOS_PUNTOS data_type PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), null, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funciones ::= FUNCTION IDENTIFICADOR PAR_A parametros PAR_C DOS_PUNTOS data_type PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(b), null, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones ::= FUNCTION IDENTIFICADOR PAR_A PAR_C DOS_PUNTOS data_type PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), c, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= FUNCTION IDENTIFICADOR PAR_A parametros PAR_C DOS_PUNTOS data_type PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(b), c, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stament ::= procedimiento 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stament ::= funciones 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stament ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stament ::= declaracion_contantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stament ::= declaracion_tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // staments ::= error PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // staments ::= stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // staments ::= staments stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // component_program ::= BEGIN END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProgramaPrincipal(new ArrayList<Sentencia>(), new ArrayList<Sentencia>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // component_program ::= BEGIN bloque_codigo END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProgramaPrincipal(new ArrayList<Sentencia>(), b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // component_program ::= staments BEGIN END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ProgramaPrincipal(a, new ArrayList<Sentencia>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // component_program ::= staments BEGIN bloque_codigo END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProgramaPrincipal(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // components_program ::= component_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("components_program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // components_program ::= components_program component_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("components_program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM IDENTIFICADOR PUNTO_COMA components_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> start_val = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

