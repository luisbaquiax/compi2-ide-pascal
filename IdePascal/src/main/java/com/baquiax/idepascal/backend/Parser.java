
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 10 19:21:11 CST 2024
//----------------------------------------------------

package com.baquiax.idepascal.backend;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import com.baquiax.idepascal.backend.errores.*;
import com.baquiax.idepascal.backend.stament.*;
import com.baquiax.idepascal.backend.simbol.*;
import com.baquiax.idepascal.backend.expresion.*;
import com.baquiax.idepascal.backend.expresion.operacion.aritmetica.*;
import com.baquiax.idepascal.backend.expresion.operacion.booleanos.*;
import com.baquiax.idepascal.backend.expresion.operacion.relacional.*;
import com.baquiax.idepascal.backend.expresion.accesovariable.*;
import com.baquiax.idepascal.backend.declaracion.*;
import com.baquiax.idepascal.backend.sentencias.*;
import com.baquiax.idepascal.backend.funcion.*;
import com.baquiax.idepascal.backend.simbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 10 19:21:11 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\010\007\000\002\003\004" +
    "\000\002\003\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\020\017\000\002\020\016\000\002\020\016\000\002\020" +
    "\015\000\002\021\015\000\002\021\014\000\002\021\014" +
    "\000\002\021\013\000\002\022\005\000\002\022\003\000" +
    "\002\023\006\000\002\023\006\000\002\023\005\000\002" +
    "\023\005\000\002\051\006\000\002\051\005\000\002\006" +
    "\005\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\011\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\030\004" +
    "\000\002\031\004\000\002\031\003\000\002\032\006\000" +
    "\002\032\010\000\002\032\016\000\002\033\004\000\002" +
    "\034\004\000\002\034\003\000\002\035\006\000\002\036" +
    "\004\000\002\037\004\000\002\037\003\000\002\040\006" +
    "\000\002\040\010\000\002\040\006\000\002\040\010\000" +
    "\002\040\016\000\002\040\016\000\002\041\011\000\002" +
    "\042\004\000\002\042\003\000\002\043\017\000\002\043" +
    "\006\000\002\043\006\000\002\044\005\000\002\044\003" +
    "\000\002\045\003\000\002\056\005\000\002\056\010\000" +
    "\002\057\010\000\002\057\012\000\002\057\012\000\002" +
    "\057\014\000\002\057\014\000\002\057\016\000\002\012" +
    "\013\000\002\012\016\000\002\012\011\000\002\024\004" +
    "\000\002\024\003\000\002\025\005\000\002\025\010\000" +
    "\002\060\012\000\002\061\012\000\002\062\006\000\002" +
    "\054\003\000\002\055\003\000\002\052\006\000\002\053" +
    "\006\000\002\050\005\000\002\050\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\006\000\002\046\006\000\002\046\005\000" +
    "\002\046\004\000\002\046\004\000\002\046\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\006" +
    "\000\002\063\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\004\035\005\001\002\000\004\002\u013c\001" +
    "\002\000\004\112\006\001\002\000\004\063\007\001\002" +
    "\000\014\011\025\022\023\034\012\045\016\047\014\001" +
    "\002\000\016\002\ufffe\011\ufffe\022\ufffe\034\ufffe\045\ufffe" +
    "\047\ufffe\001\002\000\016\002\000\011\025\022\023\034" +
    "\012\045\016\047\014\001\002\000\004\112\u0122\001\002" +
    "\000\016\006\ufff6\011\ufff6\022\ufff6\034\ufff6\045\ufff6\047" +
    "\ufff6\001\002\000\004\112\133\001\002\000\016\006\ufff8" +
    "\011\ufff8\022\ufff8\034\ufff8\045\ufff8\047\ufff8\001\002\000" +
    "\004\112\133\001\002\000\016\006\ufff9\011\ufff9\022\ufff9" +
    "\034\ufff9\045\ufff9\047\ufff9\001\002\000\016\006\ufff7\011" +
    "\ufff7\022\ufff7\034\ufff7\045\ufff7\047\ufff7\001\002\000\016" +
    "\006\355\011\025\022\023\034\012\045\016\047\014\001" +
    "\002\000\016\006\ufffa\011\ufffa\022\ufffa\034\ufffa\045\ufffa" +
    "\047\ufffa\001\002\000\004\112\126\001\002\000\016\006" +
    "\ufffb\011\ufffb\022\ufffb\034\ufffb\045\ufffb\047\ufffb\001\002" +
    "\000\004\112\026\001\002\000\004\073\032\001\002\000" +
    "\020\006\uffcf\011\uffcf\022\uffcf\034\uffcf\045\uffcf\047\uffcf" +
    "\112\026\001\002\000\020\006\uffcd\011\uffcd\022\uffcd\034" +
    "\uffcd\045\uffcd\047\uffcd\112\uffcd\001\002\000\020\006\uffce" +
    "\011\uffce\022\uffce\034\uffce\045\uffce\047\uffce\112\uffce\001" +
    "\002\000\024\030\045\055\036\067\034\112\046\113\037" +
    "\114\035\115\033\116\040\117\043\001\002\000\062\004" +
    "\uff8b\014\uff8b\015\uff8b\017\uff8b\027\uff8b\032\uff8b\044\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\070\uff8b\072\uff8b\073\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\001\002\000\024\030" +
    "\045\055\036\067\034\112\046\113\037\114\035\115\033" +
    "\116\040\117\043\001\002\000\062\004\uff8c\014\uff8c\015" +
    "\uff8c\017\uff8c\027\uff8c\032\uff8c\044\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\070\uff8c\072\uff8c\073\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\062\004\uff8d\014\uff8d\015\uff8d\017\uff8d\027" +
    "\uff8d\032\uff8d\044\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\070\uff8d\072" +
    "\uff8d\073\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\001\002\000\062\004\uff8a\014\uff8a\015\uff8a\017\uff8a\027" +
    "\uff8a\032\uff8a\044\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a\072" +
    "\uff8a\073\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\001\002\000\062\004\uff8e\014\uff8e\015\uff8e\017\uff8e\027" +
    "\uff8e\032\uff8e\044\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\070\uff8e\072" +
    "\uff8e\073\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e" +
    "\001\002\000\040\004\052\014\063\027\057\032\070\055" +
    "\053\056\054\057\056\060\064\063\122\073\065\077\066" +
    "\100\062\101\055\102\067\103\060\001\002\000\062\004" +
    "\uff89\014\uff89\015\uff89\017\uff89\027\uff89\032\uff89\044\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\062\uff89\063\uff89\064" +
    "\uff89\065\uff89\066\uff89\070\uff89\072\uff89\073\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\103\uff89\001\002\000\062\004" +
    "\uff86\014\uff86\015\uff86\017\uff86\027\uff86\032\uff86\044\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\070\uff86\072\uff86\073\uff86\077\uff86" +
    "\100\uff86\101\uff86\102\uff86\103\uff86\001\002\000\024\030" +
    "\045\055\036\067\034\112\046\113\037\114\035\115\033" +
    "\116\040\117\043\001\002\000\066\004\uff88\014\uff88\015" +
    "\uff88\017\uff88\027\uff88\032\uff88\044\uff88\055\uff88\056\uff88" +
    "\057\uff88\060\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\047\070\uff88\071\050\072\uff88\073\uff88\077\uff88" +
    "\100\uff88\101\uff88\102\uff88\103\uff88\001\002\000\026\030" +
    "\045\055\036\067\034\070\115\112\046\113\037\114\035" +
    "\115\033\116\040\117\043\001\002\000\024\030\045\055" +
    "\036\067\034\112\046\113\037\114\035\115\033\116\040" +
    "\117\043\001\002\000\040\004\052\014\063\027\057\032" +
    "\070\055\053\056\054\057\056\060\064\072\061\073\065" +
    "\077\066\100\062\101\055\102\067\103\060\001\002\000" +
    "\026\030\045\043\110\055\036\067\034\112\046\113\037" +
    "\114\035\115\033\116\040\117\043\001\002\000\024\030" +
    "\045\055\036\067\034\112\046\113\037\114\035\115\033" +
    "\116\040\117\043\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\024\030\045\055\036\067\034\112\046\113" +
    "\037\114\035\115\033\116\040\117\043\001\002\000\024" +
    "\030\045\055\036\067\034\112\046\113\037\114\035\115" +
    "\033\116\040\117\043\001\002\000\024\030\045\055\036" +
    "\067\034\112\046\113\037\114\035\115\033\116\040\117" +
    "\043\001\002\000\024\030\045\055\036\067\034\112\046" +
    "\113\037\114\035\115\033\116\040\117\043\001\002\000" +
    "\062\004\uff87\014\uff87\015\uff87\017\uff87\027\uff87\032\uff87" +
    "\044\uff87\055\uff87\056\uff87\057\uff87\060\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\066\uff87\070\uff87\072\uff87\073\uff87" +
    "\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\001\002\000" +
    "\024\030\045\055\036\067\034\112\046\113\037\114\035" +
    "\115\033\116\040\117\043\001\002\000\024\030\045\055" +
    "\036\067\034\112\046\113\037\114\035\115\033\116\040" +
    "\117\043\001\002\000\024\030\045\055\036\067\034\112" +
    "\046\113\037\114\035\115\033\116\040\117\043\001\002" +
    "\000\024\030\045\055\036\067\034\112\046\113\037\114" +
    "\035\115\033\116\040\117\043\001\002\000\024\030\045" +
    "\055\036\067\034\112\046\113\037\114\035\115\033\116" +
    "\040\117\043\001\002\000\024\030\045\055\036\067\034" +
    "\112\046\113\037\114\035\115\033\116\040\117\043\001" +
    "\002\000\026\017\072\030\045\055\036\067\034\112\046" +
    "\113\037\114\035\115\033\116\040\117\043\001\002\000" +
    "\062\004\052\014\063\015\uff94\017\uff94\027\057\032\uff94" +
    "\044\uff94\055\053\056\054\057\056\060\064\062\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\070\uff94\072\uff94\073\065" +
    "\077\066\100\062\101\055\102\067\103\060\001\002\000" +
    "\024\030\045\055\036\067\034\112\046\113\037\114\035" +
    "\115\033\116\040\117\043\001\002\000\062\004\052\014" +
    "\063\015\uff92\017\uff92\027\057\032\070\044\uff92\055\053" +
    "\056\054\057\056\060\064\062\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\070\uff92\072\uff92\073\065\077\066\100\062" +
    "\101\055\102\067\103\060\001\002\000\062\004\uff96\014" +
    "\063\015\uff96\017\uff96\027\057\032\uff96\044\uff96\055\053" +
    "\056\054\057\056\060\064\062\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\070\uff96\072\uff96\073\uff96\077\uff96\100\uff96" +
    "\101\uff96\102\uff96\103\uff96\001\002\000\062\004\uff9a\014" +
    "\063\015\uff9a\017\uff9a\027\057\032\uff9a\044\uff9a\055\053" +
    "\056\054\057\056\060\064\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\070\uff9a\072\uff9a\073\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\102\uff9a\103\uff9a\001\002\000\062\004\uff9b\014" +
    "\063\015\uff9b\017\uff9b\027\057\032\uff9b\044\uff9b\055\053" +
    "\056\054\057\056\060\064\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\070\uff9b\072\uff9b\073\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\001\002\000\062\004\uff9e\014" +
    "\uff9e\015\uff9e\017\uff9e\027\uff9e\032\uff9e\044\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\070\uff9e\072\uff9e\073\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\001\002\000\062\004\uff9d\014" +
    "\uff9d\015\uff9d\017\uff9d\027\uff9d\032\uff9d\044\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\070\uff9d\072\uff9d\073\uff9d\077\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\103\uff9d\001\002\000\062\004\uff99\014" +
    "\063\015\uff99\017\uff99\027\057\032\uff99\044\uff99\055\053" +
    "\056\054\057\056\060\064\062\uff99\063\uff99\064\uff99\065" +
    "\uff99\066\uff99\070\uff99\072\uff99\073\uff99\077\uff99\100\uff99" +
    "\101\uff99\102\uff99\103\uff99\001\002\000\062\004\uff97\014" +
    "\063\015\uff97\017\uff97\027\057\032\uff97\044\uff97\055\053" +
    "\056\054\057\056\060\064\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\070\uff97\072\uff97\073\uff97\077\uff97\100\uff97" +
    "\101\uff97\102\uff97\103\uff97\001\002\000\062\004\uff9c\014" +
    "\uff9c\015\uff9c\017\uff9c\027\uff9c\032\uff9c\044\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c\077\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\001\002\000\062\004\uff9f\014" +
    "\uff9f\015\uff9f\017\uff9f\027\uff9f\032\uff9f\044\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\070\uff9f\072\uff9f\073\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\103\uff9f\001\002\000\062\004\uff98\014" +
    "\063\015\uff98\017\uff98\027\057\032\uff98\044\uff98\055\053" +
    "\056\054\057\056\060\064\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\070\uff98\072\uff98\073\uff98\077\uff98\100\uff98" +
    "\101\uff98\102\uff98\103\uff98\001\002\000\062\004\uffa1\014" +
    "\063\015\uffa1\017\uffa1\027\057\032\uffa1\044\uffa1\055\uffa1" +
    "\056\uffa1\057\056\060\064\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\070\uffa1\072\uffa1\073\uffa1\077\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\001\002\000\062\004\uffa0\014" +
    "\063\015\uffa0\017\uffa0\027\057\032\uffa0\044\uffa0\055\uffa0" +
    "\056\uffa0\057\056\060\064\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\070\uffa0\072\uffa0\073\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\001\002\000\024\030\045\055" +
    "\036\067\034\112\046\113\037\114\035\115\033\116\040" +
    "\117\043\001\002\000\062\004\uff95\014\063\015\uff95\017" +
    "\uff95\027\057\032\uff95\044\uff95\055\053\056\054\057\056" +
    "\060\064\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070" +
    "\uff95\072\uff95\073\065\077\066\100\062\101\055\102\067" +
    "\103\060\001\002\000\062\004\052\014\063\015\uff93\017" +
    "\uff93\027\057\032\070\044\uff93\055\053\056\054\057\056" +
    "\060\064\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\070" +
    "\uff93\072\uff93\073\065\077\066\100\062\101\055\102\067" +
    "\103\060\001\002\000\042\004\052\014\063\027\057\032" +
    "\070\055\053\056\054\057\056\060\064\062\uffe4\070\uffe4" +
    "\073\065\077\066\100\062\101\055\102\067\103\060\001" +
    "\002\000\006\062\116\070\117\001\002\000\062\004\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\027\uffe6\032\uffe6\044\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\070\uffe6\072\uffe6\073\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\102\uffe6\103\uffe6\001\002\000\024\030\045" +
    "\055\036\067\034\112\046\113\037\114\035\115\033\116" +
    "\040\117\043\001\002\000\062\004\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\027\uffe7\032\uffe7\044\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\077\uffe7\100\uffe7\101\uffe7\102" +
    "\uffe7\103\uffe7\001\002\000\042\004\052\014\063\027\057" +
    "\032\070\055\053\056\054\057\056\060\064\062\uffe5\070" +
    "\uffe5\073\065\077\066\100\062\101\055\102\067\103\060" +
    "\001\002\000\062\004\uff90\014\uff90\015\uff90\017\uff90\027" +
    "\uff90\032\uff90\044\uff90\055\uff90\056\uff90\057\uff90\060\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\070\uff90\072" +
    "\uff90\073\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\001\002\000\020\006\uffcc\011\uffcc\022\uffcc\034\uffcc\045" +
    "\uffcc\047\uffcc\112\uffcc\001\002\000\062\004\uff8f\014\uff8f" +
    "\015\uff8f\017\uff8f\027\uff8f\032\uff8f\044\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\070\uff8f\072\uff8f\073\uff8f\077\uff8f\100\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\001\002\000\040\004\052\014\063" +
    "\027\057\032\070\055\053\056\054\057\056\060\064\070" +
    "\125\073\065\077\066\100\062\101\055\102\067\103\060" +
    "\001\002\000\062\004\uff91\014\uff91\015\uff91\017\uff91\027" +
    "\uff91\032\uff91\044\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\070\uff91\072" +
    "\uff91\073\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91" +
    "\001\002\000\004\067\127\001\002\000\010\047\130\070" +
    "\131\112\133\001\002\000\004\112\133\001\002\000\004" +
    "\066\334\001\002\000\006\063\152\070\151\001\002\000" +
    "\010\062\uffba\066\uffba\073\uffba\001\002\000\006\062\137" +
    "\066\140\001\002\000\006\063\uffec\070\uffec\001\002\000" +
    "\010\062\uffbb\066\uffbb\073\uffbb\001\002\000\004\112\133" +
    "\001\002\000\016\012\143\037\145\053\141\105\142\106" +
    "\146\112\144\001\002\000\010\063\uff85\070\uff85\073\uff85" +
    "\001\002\000\010\063\uff82\070\uff82\073\uff82\001\002\000" +
    "\010\063\uff81\070\uff81\073\uff81\001\002\000\006\063\uffe8" +
    "\070\uffe8\001\002\000\010\063\uff84\070\uff84\073\uff84\001" +
    "\002\000\010\063\uff83\070\uff83\073\uff83\001\002\000\006" +
    "\063\uffe9\070\uffe9\001\002\000\010\062\uffbc\066\uffbc\073" +
    "\uffbc\001\002\000\004\066\154\001\002\000\006\047\130" +
    "\112\133\001\002\000\006\063\uffed\070\uffed\001\002\000" +
    "\014\012\143\037\145\053\141\105\142\106\146\001\002" +
    "\000\004\063\156\001\002\000\006\006\160\047\014\001" +
    "\002\000\004\006\330\001\002\000\026\007\175\010\176" +
    "\013\161\024\170\040\205\041\210\050\163\052\166\054" +
    "\204\112\200\001\002\000\006\017\uffa6\063\uffa6\001\002" +
    "\000\006\017\uffd9\063\uffd9\001\002\000\004\067\321\001" +
    "\002\000\006\017\uffd7\063\uffd7\001\002\000\006\017\uffdc" +
    "\063\uffdc\001\002\000\004\067\316\001\002\000\006\017" +
    "\uffdd\063\uffdd\001\002\000\004\067\274\001\002\000\006" +
    "\017\uffde\063\uffde\001\002\000\006\017\uffdf\063\uffdf\001" +
    "\002\000\006\017\uffda\063\uffda\001\002\000\006\017\uffd8" +
    "\063\uffd8\001\002\000\006\017\uffa7\063\uffa7\001\002\000" +
    "\004\067\245\001\002\000\006\017\uffd6\063\uffd6\001\002" +
    "\000\010\061\234\067\047\071\235\001\002\000\030\007" +
    "\175\010\176\013\161\020\243\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\006\017" +
    "\uffdb\063\uffdb\001\002\000\032\007\uffe2\010\uffe2\013\uffe2" +
    "\020\uffe2\024\uffe2\040\uffe2\041\uffe2\046\uffe2\050\uffe2\052" +
    "\uffe2\054\uffe2\112\uffe2\001\002\000\004\112\224\001\002" +
    "\000\026\007\175\010\176\013\161\024\170\040\205\041" +
    "\210\050\163\052\166\054\204\112\200\001\002\000\006" +
    "\017\uffe0\063\uffe0\001\002\000\004\063\217\001\002\000" +
    "\004\067\211\001\002\000\024\030\045\055\036\067\034" +
    "\112\046\113\037\114\035\115\033\116\040\117\043\001" +
    "\002\000\042\004\052\014\063\027\057\032\070\055\053" +
    "\056\054\057\056\060\064\062\uffa2\070\uffa2\073\065\077" +
    "\066\100\062\101\055\102\067\103\060\001\002\000\006" +
    "\062\214\070\215\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\006\017\uffa4\063\uffa4\001\002\000\042\004" +
    "\052\014\063\027\057\032\070\055\053\056\054\057\056" +
    "\060\064\062\uffa3\070\uffa3\073\065\077\066\100\062\101" +
    "\055\102\067\103\060\001\002\000\054\007\uffe1\010\uffe1" +
    "\013\uffe1\017\uffe1\020\uffe1\024\uffe1\030\uffe1\040\uffe1\041" +
    "\uffe1\046\uffe1\050\uffe1\052\uffe1\054\uffe1\055\uffe1\067\uffe1" +
    "\112\uffe1\113\uffe1\114\uffe1\115\uffe1\116\uffe1\117\uffe1\001" +
    "\002\000\030\007\175\010\176\013\161\024\170\040\205" +
    "\041\210\046\221\050\163\052\166\054\204\112\200\001" +
    "\002\000\024\030\045\055\036\067\034\112\046\113\037" +
    "\114\035\115\033\116\040\117\043\001\002\000\032\007" +
    "\uffe3\010\uffe3\013\uffe3\020\uffe3\024\uffe3\040\uffe3\041\uffe3" +
    "\046\uffe3\050\uffe3\052\uffe3\054\uffe3\112\uffe3\001\002\000" +
    "\042\004\052\014\063\017\uffa8\027\057\032\070\055\053" +
    "\056\054\057\056\060\064\063\uffa8\073\065\077\066\100" +
    "\062\101\055\102\067\103\060\001\002\000\006\061\234" +
    "\071\235\001\002\000\004\044\226\001\002\000\024\030" +
    "\045\055\036\067\034\112\046\113\037\114\035\115\033" +
    "\116\040\117\043\001\002\000\040\004\052\014\063\015" +
    "\230\027\057\032\070\055\053\056\054\057\056\060\064" +
    "\073\065\077\066\100\062\101\055\102\067\103\060\001" +
    "\002\000\004\006\231\001\002\000\026\007\175\010\176" +
    "\013\161\024\170\040\205\041\210\050\163\052\166\054" +
    "\204\112\200\001\002\000\030\007\175\010\176\013\161" +
    "\020\233\024\170\040\205\041\210\050\163\052\166\054" +
    "\204\112\200\001\002\000\006\017\uffa9\063\uffa9\001\002" +
    "\000\024\030\045\055\036\067\034\112\046\113\037\114" +
    "\035\115\033\116\040\117\043\001\002\000\024\030\045" +
    "\055\036\067\034\112\046\113\037\114\035\115\033\116" +
    "\040\117\043\001\002\000\040\004\052\014\063\027\057" +
    "\032\070\055\053\056\054\057\056\060\064\072\237\073" +
    "\065\077\066\100\062\101\055\102\067\103\060\001\002" +
    "\000\004\061\240\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\044\004\052\014\063\017\uffb8\027\057\032" +
    "\070\044\uffb8\055\053\056\054\057\056\060\064\063\uffb8" +
    "\073\065\077\066\100\062\101\055\102\067\103\060\001" +
    "\002\000\044\004\052\014\063\017\uffb9\027\057\032\070" +
    "\044\uffb9\055\053\056\054\057\056\060\064\063\uffb9\073" +
    "\065\077\066\100\062\101\055\102\067\103\060\001\002" +
    "\000\004\063\244\001\002\000\016\006\ufff3\011\ufff3\022" +
    "\ufff3\034\ufff3\045\ufff3\047\ufff3\001\002\000\024\030\045" +
    "\055\036\067\034\112\046\113\037\114\035\115\033\116" +
    "\040\117\043\001\002\000\040\004\052\014\063\027\057" +
    "\032\070\055\053\056\054\057\056\060\064\070\247\073" +
    "\065\077\066\100\062\101\055\102\067\103\060\001\002" +
    "\000\004\031\250\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\030\017\uffad\020\uffad\030\uffad\055\uffad\067" +
    "\uffad\112\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad" +
    "\001\002\000\030\017\263\020\264\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\040\004\052\014\063\027\057\032\070\055" +
    "\053\056\054\057\056\060\064\066\254\073\065\077\066" +
    "\100\062\101\055\102\067\103\060\001\002\000\030\006" +
    "\255\007\175\010\176\013\161\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\026\007" +
    "\175\010\176\013\161\024\170\040\205\041\210\050\163" +
    "\052\166\054\204\112\200\001\002\000\030\017\uffac\020" +
    "\uffac\030\uffac\055\uffac\067\uffac\112\uffac\113\uffac\114\uffac" +
    "\115\uffac\116\uffac\117\uffac\001\002\000\030\007\175\010" +
    "\176\013\161\020\260\024\170\040\205\041\210\050\163" +
    "\052\166\054\204\112\200\001\002\000\004\063\261\001" +
    "\002\000\030\017\uffab\020\uffab\030\uffab\055\uffab\067\uffab" +
    "\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab\001" +
    "\002\000\030\017\uffae\020\uffae\030\uffae\055\uffae\067\uffae" +
    "\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae\001" +
    "\002\000\030\006\265\007\175\010\176\013\161\024\170" +
    "\040\205\041\210\050\163\052\166\054\204\112\200\001" +
    "\002\000\006\017\uffaf\063\uffaf\001\002\000\026\007\175" +
    "\010\176\013\161\024\170\040\205\041\210\050\163\052" +
    "\166\054\204\112\200\001\002\000\004\020\267\001\002" +
    "\000\006\017\uffb1\063\uffb1\001\002\000\030\007\175\010" +
    "\176\013\161\020\271\024\170\040\205\041\210\050\163" +
    "\052\166\054\204\112\200\001\002\000\004\063\272\001" +
    "\002\000\004\020\273\001\002\000\006\017\uffb0\063\uffb0" +
    "\001\002\000\024\030\045\055\036\067\034\112\046\113" +
    "\037\114\035\115\033\116\040\117\043\001\002\000\040" +
    "\004\052\014\063\027\057\032\070\055\053\056\054\057" +
    "\056\060\064\070\276\073\065\077\066\100\062\101\055" +
    "\102\067\103\060\001\002\000\004\043\277\001\002\000" +
    "\030\006\300\007\175\010\176\013\161\024\170\040\205" +
    "\041\210\050\163\052\166\054\204\112\200\001\002\000" +
    "\026\007\175\010\176\013\161\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\006\017" +
    "\302\063\uffb7\001\002\000\030\006\303\007\175\010\176" +
    "\013\161\024\170\040\205\041\210\050\163\052\166\054" +
    "\204\112\200\001\002\000\026\007\175\010\176\013\161" +
    "\024\170\040\205\041\210\050\163\052\166\054\204\112" +
    "\200\001\002\000\006\017\uffb5\063\uffb5\001\002\000\030" +
    "\007\175\010\176\013\161\020\306\024\170\040\205\041" +
    "\210\050\163\052\166\054\204\112\200\001\002\000\006" +
    "\017\uffb4\063\uffb4\001\002\000\030\007\175\010\176\013" +
    "\161\020\310\024\170\040\205\041\210\050\163\052\166" +
    "\054\204\112\200\001\002\000\006\017\311\063\uffb6\001" +
    "\002\000\030\006\312\007\175\010\176\013\161\024\170" +
    "\040\205\041\210\050\163\052\166\054\204\112\200\001" +
    "\002\000\026\007\175\010\176\013\161\024\170\040\205" +
    "\041\210\050\163\052\166\054\204\112\200\001\002\000" +
    "\006\017\uffb3\063\uffb3\001\002\000\030\007\175\010\176" +
    "\013\161\020\315\024\170\040\205\041\210\050\163\052" +
    "\166\054\204\112\200\001\002\000\006\017\uffb2\063\uffb2" +
    "\001\002\000\024\030\045\055\036\067\034\112\046\113" +
    "\037\114\035\115\033\116\040\117\043\001\002\000\006" +
    "\062\214\070\320\001\002\000\006\017\uffa5\063\uffa5\001" +
    "\002\000\024\030\045\055\036\067\034\112\046\113\037" +
    "\114\035\115\033\116\040\117\043\001\002\000\040\004" +
    "\052\014\063\027\057\032\070\055\053\056\054\057\056" +
    "\060\064\070\323\073\065\077\066\100\062\101\055\102" +
    "\067\103\060\001\002\000\004\015\324\001\002\000\004" +
    "\006\325\001\002\000\026\007\175\010\176\013\161\024" +
    "\170\040\205\041\210\050\163\052\166\054\204\112\200" +
    "\001\002\000\030\007\175\010\176\013\161\020\327\024" +
    "\170\040\205\041\210\050\163\052\166\054\204\112\200" +
    "\001\002\000\006\017\uffaa\063\uffaa\001\002\000\026\007" +
    "\175\010\176\013\161\024\170\040\205\041\210\050\163" +
    "\052\166\054\204\112\200\001\002\000\030\007\175\010" +
    "\176\013\161\020\332\024\170\040\205\041\210\050\163" +
    "\052\166\054\204\112\200\001\002\000\004\063\333\001" +
    "\002\000\016\006\ufff5\011\ufff5\022\ufff5\034\ufff5\045\ufff5" +
    "\047\ufff5\001\002\000\014\012\143\037\145\053\141\105" +
    "\142\106\146\001\002\000\004\063\336\001\002\000\006" +
    "\006\340\047\014\001\002\000\004\006\344\001\002\000" +
    "\026\007\175\010\176\013\161\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\030\007" +
    "\175\010\176\013\161\020\342\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\004\063" +
    "\343\001\002\000\016\006\ufff2\011\ufff2\022\ufff2\034\ufff2" +
    "\045\ufff2\047\ufff2\001\002\000\026\007\175\010\176\013" +
    "\161\024\170\040\205\041\210\050\163\052\166\054\204" +
    "\112\200\001\002\000\030\007\175\010\176\013\161\020" +
    "\346\024\170\040\205\041\210\050\163\052\166\054\204" +
    "\112\200\001\002\000\004\063\347\001\002\000\016\006" +
    "\ufff4\011\ufff4\022\ufff4\034\ufff4\045\ufff4\047\ufff4\001\002" +
    "\000\006\062\137\066\351\001\002\000\016\012\143\037" +
    "\145\053\141\105\142\106\146\112\352\001\002\000\006" +
    "\063\uffea\070\uffea\001\002\000\006\063\uffeb\070\uffeb\001" +
    "\002\000\016\006\ufffc\011\ufffc\022\ufffc\034\ufffc\045\ufffc" +
    "\047\ufffc\001\002\000\026\007\175\010\176\013\161\024" +
    "\170\040\205\041\210\050\163\052\166\054\204\112\200" +
    "\001\002\000\030\007\175\010\176\013\161\020\357\024" +
    "\170\040\205\041\210\050\163\052\166\054\204\112\200" +
    "\001\002\000\004\064\360\001\002\000\016\002\ufffd\011" +
    "\ufffd\022\ufffd\034\ufffd\045\ufffd\047\ufffd\001\002\000\020" +
    "\006\uffd3\011\uffd3\022\uffd3\034\uffd3\045\uffd3\047\uffd3\112" +
    "\uffd3\001\002\000\006\062\137\073\365\001\002\000\020" +
    "\006\uffd5\011\uffd5\022\uffd5\034\uffd5\045\uffd5\047\uffd5\112" +
    "\133\001\002\000\020\006\uffd4\011\uffd4\022\uffd4\034\uffd4" +
    "\045\uffd4\047\uffd4\112\uffd4\001\002\000\040\005\370\012" +
    "\143\030\045\037\145\053\141\055\036\067\034\105\142" +
    "\106\146\112\046\113\037\114\035\115\033\116\040\117" +
    "\043\001\002\000\004\063\u0105\001\002\000\040\004\052" +
    "\014\063\027\057\032\070\055\053\056\054\057\056\060" +
    "\064\065\u0102\073\065\077\066\100\062\101\055\102\067" +
    "\103\060\001\002\000\004\071\371\001\002\000\024\030" +
    "\045\055\036\067\034\112\046\113\037\114\035\115\033" +
    "\116\040\117\043\001\002\000\040\004\052\014\063\027" +
    "\057\032\070\055\053\056\054\057\056\060\064\064\373" +
    "\073\065\077\066\100\062\101\055\102\067\103\060\001" +
    "\002\000\004\064\374\001\002\000\024\030\045\055\036" +
    "\067\034\112\046\113\037\114\035\115\033\116\040\117" +
    "\043\001\002\000\040\004\052\014\063\027\057\032\070" +
    "\055\053\056\054\057\056\060\064\072\376\073\065\077" +
    "\066\100\062\101\055\102\067\103\060\001\002\000\004" +
    "\031\377\001\002\000\014\012\143\037\145\053\141\105" +
    "\142\106\146\001\002\000\004\063\u0101\001\002\000\020" +
    "\006\uffd0\011\uffd0\022\uffd0\034\uffd0\045\uffd0\047\uffd0\112" +
    "\uffd0\001\002\000\024\030\045\055\036\067\034\112\046" +
    "\113\037\114\035\115\033\116\040\117\043\001\002\000" +
    "\040\004\052\014\063\027\057\032\070\055\053\056\054" +
    "\057\056\060\064\063\u0104\073\065\077\066\100\062\101" +
    "\055\102\067\103\060\001\002\000\020\006\uffd1\011\uffd1" +
    "\022\uffd1\034\uffd1\045\uffd1\047\uffd1\112\uffd1\001\002\000" +
    "\020\006\uffd2\011\uffd2\022\uffd2\034\uffd2\045\uffd2\047\uffd2" +
    "\112\uffd2\001\002\000\020\006\uffc9\011\uffc9\022\uffc9\034" +
    "\uffc9\045\uffc9\047\uffc9\112\uffc9\001\002\000\006\062\137" +
    "\066\u010a\001\002\000\020\006\uffcb\011\uffcb\022\uffcb\034" +
    "\uffcb\045\uffcb\047\uffcb\112\133\001\002\000\020\006\uffca" +
    "\011\uffca\022\uffca\034\uffca\045\uffca\047\uffca\112\uffca\001" +
    "\002\000\040\005\u010e\012\143\030\045\037\145\053\141" +
    "\055\036\067\034\105\142\106\146\112\u010d\113\037\114" +
    "\035\115\033\116\040\117\043\001\002\000\006\063\u011e" +
    "\073\u011f\001\002\000\040\004\052\014\063\027\057\032" +
    "\070\055\053\056\054\057\056\060\064\065\u011b\073\065" +
    "\077\066\100\062\101\055\102\067\103\060\001\002\000" +
    "\046\004\uff88\014\uff88\027\uff88\032\uff88\055\uff88\056\uff88" +
    "\057\uff88\060\uff88\063\u011a\065\uff88\067\047\071\050\073" +
    "\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\001\002" +
    "\000\004\071\u010f\001\002\000\024\030\045\055\036\067" +
    "\034\112\046\113\037\114\035\115\033\116\040\117\043" +
    "\001\002\000\040\004\052\014\063\027\057\032\070\055" +
    "\053\056\054\057\056\060\064\064\u0111\073\065\077\066" +
    "\100\062\101\055\102\067\103\060\001\002\000\004\064" +
    "\u0112\001\002\000\024\030\045\055\036\067\034\112\046" +
    "\113\037\114\035\115\033\116\040\117\043\001\002\000" +
    "\040\004\052\014\063\027\057\032\070\055\053\056\054" +
    "\057\056\060\064\072\u0114\073\065\077\066\100\062\101" +
    "\055\102\067\103\060\001\002\000\004\031\u0115\001\002" +
    "\000\016\012\143\037\145\053\141\105\142\106\146\112" +
    "\u0116\001\002\000\004\063\u0119\001\002\000\004\063\u0118" +
    "\001\002\000\020\006\uffc4\011\uffc4\022\uffc4\034\uffc4\045" +
    "\uffc4\047\uffc4\112\uffc4\001\002\000\020\006\uffc3\011\uffc3" +
    "\022\uffc3\034\uffc3\045\uffc3\047\uffc3\112\uffc3\001\002\000" +
    "\020\006\uffc6\011\uffc6\022\uffc6\034\uffc6\045\uffc6\047\uffc6" +
    "\112\uffc6\001\002\000\024\030\045\055\036\067\034\112" +
    "\046\113\037\114\035\115\033\116\040\117\043\001\002" +
    "\000\040\004\052\014\063\027\057\032\070\055\053\056" +
    "\054\057\056\060\064\063\u011d\073\065\077\066\100\062" +
    "\101\055\102\067\103\060\001\002\000\020\006\uffc5\011" +
    "\uffc5\022\uffc5\034\uffc5\045\uffc5\047\uffc5\112\uffc5\001\002" +
    "\000\020\006\uffc8\011\uffc8\022\uffc8\034\uffc8\045\uffc8\047" +
    "\uffc8\112\uffc8\001\002\000\024\030\045\055\036\067\034" +
    "\112\046\113\037\114\035\115\033\116\040\117\043\001" +
    "\002\000\040\004\052\014\063\027\057\032\070\055\053" +
    "\056\054\057\056\060\064\063\u0121\073\065\077\066\100" +
    "\062\101\055\102\067\103\060\001\002\000\020\006\uffc7" +
    "\011\uffc7\022\uffc7\034\uffc7\045\uffc7\047\uffc7\112\uffc7\001" +
    "\002\000\004\067\u0123\001\002\000\010\047\130\070\u0124" +
    "\112\133\001\002\000\004\063\u0131\001\002\000\006\063" +
    "\152\070\u0126\001\002\000\004\063\u0127\001\002\000\006" +
    "\006\u0129\047\014\001\002\000\004\006\u012d\001\002\000" +
    "\026\007\175\010\176\013\161\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\030\007" +
    "\175\010\176\013\161\020\u012b\024\170\040\205\041\210" +
    "\050\163\052\166\054\204\112\200\001\002\000\004\063" +
    "\u012c\001\002\000\016\006\uffef\011\uffef\022\uffef\034\uffef" +
    "\045\uffef\047\uffef\001\002\000\026\007\175\010\176\013" +
    "\161\024\170\040\205\041\210\050\163\052\166\054\204" +
    "\112\200\001\002\000\030\007\175\010\176\013\161\020" +
    "\u012f\024\170\040\205\041\210\050\163\052\166\054\204" +
    "\112\200\001\002\000\004\063\u0130\001\002\000\016\006" +
    "\ufff1\011\ufff1\022\ufff1\034\ufff1\045\ufff1\047\ufff1\001\002" +
    "\000\006\006\u0133\047\014\001\002\000\004\006\u0137\001" +
    "\002\000\026\007\175\010\176\013\161\024\170\040\205" +
    "\041\210\050\163\052\166\054\204\112\200\001\002\000" +
    "\030\007\175\010\176\013\161\020\u0135\024\170\040\205" +
    "\041\210\050\163\052\166\054\204\112\200\001\002\000" +
    "\004\063\u0136\001\002\000\016\006\uffee\011\uffee\022\uffee" +
    "\034\uffee\045\uffee\047\uffee\001\002\000\026\007\175\010" +
    "\176\013\161\024\170\040\205\041\210\050\163\052\166" +
    "\054\204\112\200\001\002\000\030\007\175\010\176\013" +
    "\161\020\u0139\024\170\040\205\041\210\050\163\052\166" +
    "\054\204\112\200\001\002\000\004\063\u013a\001\002\000" +
    "\016\006\ufff0\011\ufff0\022\ufff0\034\ufff0\045\ufff0\047\ufff0" +
    "\001\002\000\016\002\uffff\011\uffff\022\uffff\034\uffff\045" +
    "\uffff\047\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\020\004\010" +
    "\007\023\010\007\020\017\021\012\030\021\033\016\036" +
    "\014\001\001\000\002\001\001\000\022\003\020\007\023" +
    "\010\u013a\020\017\021\012\030\021\033\016\036\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\u0107" +
    "\040\u0105\044\u0106\045\135\001\001\000\002\001\001\000" +
    "\012\031\362\032\360\044\361\045\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\353\020\017\021" +
    "\012\030\021\033\016\036\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\026\035" +
    "\027\001\001\000\002\001\001\000\004\035\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\041\051" +
    "\043\063\040\001\001\000\002\001\001\000\010\046\123" +
    "\051\043\063\040\001\001\000\002\001\001\000\010\046" +
    "\122\051\043\063\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\120\051\043\063\040" +
    "\001\001\000\002\001\001\000\012\006\113\046\112\051" +
    "\043\063\040\001\001\000\010\046\050\051\043\063\040" +
    "\001\001\000\002\001\001\000\010\046\110\051\043\063" +
    "\040\001\001\000\010\046\106\051\043\063\040\001\001" +
    "\000\010\046\105\051\043\063\040\001\001\000\010\046" +
    "\104\051\043\063\040\001\001\000\010\046\103\051\043" +
    "\063\040\001\001\000\010\046\102\051\043\063\040\001" +
    "\001\000\010\046\101\051\043\063\040\001\001\000\002" +
    "\001\001\000\010\046\100\051\043\063\040\001\001\000" +
    "\010\046\077\051\043\063\040\001\001\000\010\046\076" +
    "\051\043\063\040\001\001\000\010\046\075\051\043\063" +
    "\040\001\001\000\010\046\074\051\043\063\040\001\001" +
    "\000\010\046\073\051\043\063\040\001\001\000\010\046" +
    "\070\051\043\063\040\001\001\000\002\001\001\000\010" +
    "\046\072\051\043\063\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\111\051" +
    "\043\063\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\117\051\043\063\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\131\023\134\044\133\045\135\001" +
    "\001\000\006\044\347\045\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\147\001\001" +
    "\000\004\064\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\152\044\133\045\135\001\001" +
    "\000\002\001\001\000\004\064\154\001\001\000\002\001" +
    "\001\000\004\036\156\001\001\000\002\001\001\000\036" +
    "\005\200\011\202\012\164\026\206\051\173\052\205\053" +
    "\171\054\176\055\163\056\170\057\166\060\201\061\172" +
    "\062\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\221\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\224\001\001\000\036\005\217\011" +
    "\202\012\164\026\206\051\173\052\205\053\171\054\176" +
    "\055\163\056\170\057\166\060\201\061\172\062\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\046\211\050\212\051\043\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\215\051\043" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\221\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\010\046\222\051\043" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\226\051\043" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\231\011\202\012\164\026\206\051\173\052\205" +
    "\053\171\054\176\055\163\056\170\057\166\060\201\061" +
    "\172\062\161\001\001\000\034\011\221\012\164\026\206" +
    "\051\173\052\205\053\171\054\176\055\163\056\170\057" +
    "\166\060\201\061\172\062\161\001\001\000\002\001\001" +
    "\000\010\046\241\051\043\063\040\001\001\000\010\046" +
    "\235\051\043\063\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\240\051\043\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\245\051\043\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\251\025\250" +
    "\046\252\051\043\063\040\001\001\000\002\001\001\000" +
    "\012\025\261\046\252\051\043\063\040\001\001\000\002" +
    "\001\001\000\034\011\255\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\036\005\256\011\202\012" +
    "\164\026\206\051\173\052\205\053\171\054\176\055\163" +
    "\056\170\057\166\060\201\061\172\062\161\001\001\000" +
    "\002\001\001\000\034\011\221\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\265\012\164\026" +
    "\206\051\173\052\205\053\171\054\176\055\163\056\170" +
    "\057\166\060\201\061\172\062\161\001\001\000\002\001" +
    "\001\000\036\005\267\011\202\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\221\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\274\051\043\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\164\026\300\051\173\052\205\053\171\054\176\055\163" +
    "\056\170\057\166\060\201\061\172\062\161\001\001\000" +
    "\036\005\306\011\202\012\164\026\206\051\173\052\205" +
    "\053\171\054\176\055\163\056\170\057\166\060\201\061" +
    "\172\062\161\001\001\000\002\001\001\000\032\012\164" +
    "\026\303\051\173\052\205\053\171\054\176\055\163\056" +
    "\170\057\166\060\201\061\172\062\161\001\001\000\036" +
    "\005\304\011\202\012\164\026\206\051\173\052\205\053" +
    "\171\054\176\055\163\056\170\057\166\060\201\061\172" +
    "\062\161\001\001\000\002\001\001\000\034\011\221\012" +
    "\164\026\206\051\173\052\205\053\171\054\176\055\163" +
    "\056\170\057\166\060\201\061\172\062\161\001\001\000" +
    "\002\001\001\000\034\011\221\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\002\001\001\000\032" +
    "\012\164\026\312\051\173\052\205\053\171\054\176\055" +
    "\163\056\170\057\166\060\201\061\172\062\161\001\001" +
    "\000\036\005\313\011\202\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\002\001\001\000\034\011" +
    "\221\012\164\026\206\051\173\052\205\053\171\054\176" +
    "\055\163\056\170\057\166\060\201\061\172\062\161\001" +
    "\001\000\002\001\001\000\012\046\211\050\316\051\043" +
    "\063\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\321\051\043\063\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\325\011" +
    "\202\012\164\026\206\051\173\052\205\053\171\054\176" +
    "\055\163\056\170\057\166\060\201\061\172\062\161\001" +
    "\001\000\034\011\221\012\164\026\206\051\173\052\205" +
    "\053\171\054\176\055\163\056\170\057\166\060\201\061" +
    "\172\062\161\001\001\000\002\001\001\000\036\005\330" +
    "\011\202\012\164\026\206\051\173\052\205\053\171\054" +
    "\176\055\163\056\170\057\166\060\201\061\172\062\161" +
    "\001\001\000\034\011\221\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\334\001\001\000\002\001\001\000\004" +
    "\036\336\001\001\000\002\001\001\000\036\005\340\011" +
    "\202\012\164\026\206\051\173\052\205\053\171\054\176" +
    "\055\163\056\170\057\166\060\201\061\172\062\161\001" +
    "\001\000\034\011\221\012\164\026\206\051\173\052\205" +
    "\053\171\054\176\055\163\056\170\057\166\060\201\061" +
    "\172\062\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\344\011\202\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\034\011\221\012\164\026" +
    "\206\051\173\052\205\053\171\054\176\055\163\056\170" +
    "\057\166\060\201\061\172\062\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\355\011\202\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\034\011\221\012\164" +
    "\026\206\051\173\052\205\053\171\054\176\055\163\056" +
    "\170\057\166\060\201\061\172\062\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\363\044\361\045\135\001\001\000\002" +
    "\001\001\000\012\046\366\051\043\063\040\064\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\371\051\043\063\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\374\051\043\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\u0102\051\043\063\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\040\u0108\044\u0106\045\135\001\001\000" +
    "\002\001\001\000\012\046\u010b\051\043\063\040\064\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\u010f\051\043\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u0112\051\043\063\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\u011b\051\043\063\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\u011f\051\043\063\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\u0124\023\134" +
    "\044\133\045\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\u0127\001\001\000\002" +
    "\001\001\000\036\005\u0129\011\202\012\164\026\206\051" +
    "\173\052\205\053\171\054\176\055\163\056\170\057\166" +
    "\060\201\061\172\062\161\001\001\000\034\011\221\012" +
    "\164\026\206\051\173\052\205\053\171\054\176\055\163" +
    "\056\170\057\166\060\201\061\172\062\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\u012d\011\202" +
    "\012\164\026\206\051\173\052\205\053\171\054\176\055" +
    "\163\056\170\057\166\060\201\061\172\062\161\001\001" +
    "\000\034\011\221\012\164\026\206\051\173\052\205\053" +
    "\171\054\176\055\163\056\170\057\166\060\201\061\172" +
    "\062\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\u0131\001\001\000\002\001\001\000\036\005\u0133" +
    "\011\202\012\164\026\206\051\173\052\205\053\171\054" +
    "\176\055\163\056\170\057\166\060\201\061\172\062\161" +
    "\001\001\000\034\011\221\012\164\026\206\051\173\052" +
    "\205\053\171\054\176\055\163\056\170\057\166\060\201" +
    "\061\172\062\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\u0137\011\202\012\164\026\206\051\173" +
    "\052\205\053\171\054\176\055\163\056\170\057\166\060" +
    "\201\061\172\062\161\001\001\000\034\011\221\012\164" +
    "\026\206\051\173\052\205\053\171\054\176\055\163\056" +
    "\170\057\166\060\201\061\172\062\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer){
    super(lexer);
    }

    public List<ErrorPascal> listaErrores = new ArrayList<>();

    public void syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value) + " lin,col: " +s.left +" "+s.right;
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.SEMANTICO.name(), description, s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value);
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.SEMANTICO.name(), description, s.left, s.right));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // data_type ::= TKCHAR 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CARACTER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // data_type ::= STRING 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.CADENA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // data_type ::= REAL 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // data_type ::= INTEGER 
            {
              DataType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = DataType.ENTERO; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= llamada_funcion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= IDENTIFICADOR COR_A expresion COR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoArray(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= IDENTIFICADOR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Acceso(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= FALSE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(false, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= TRUE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(true, new Tipo(DataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= CADENA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(a, new Tipo(DataType.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= DECIMAL 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Double.parseDouble(a), new Tipo(DataType.REAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor ::= ENTERO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terminal(Integer.parseInt(a), new Tipo(DataType.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= valor 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unario(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= NOT expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NOT(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= PAR_A expresion PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion OR ELSE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrElse(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion AND THEN expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndThen(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= expresion OR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OR(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion AND expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MenorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MayorIgual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion MENOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Menor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion MAYOR expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mayor(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion DIFERENTE expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Diferente(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion IGUALACION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Igual(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion MOD expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion DIV expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion DIVISION expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion MULTI expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion MENOS expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Resta(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion SUMA expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Suma(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_write ::= expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_write ::= parametros_write COMA expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_write",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // readline ::= READLN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Readline(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readline",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // writeline ::= WRITELN PAR_A parametros_write PAR_C 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> list = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteLine(list, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeline",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // s_continue ::= CONTINUE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenciaContinue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_continue",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // s_break ::= BREAK 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenciaBreak(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_break",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // repeat_until ::= REPEAT bloque_codigo UNTIL expresion 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RepeatUntil(a, b, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_until",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_for ::= FOR asignacion TO expresion DO BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaFor(a, b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_while ::= WHILE PAR_A expresion PAR_C DO BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaWhile(a, b, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // caso ::= expresion DOS_PUNTOS BEGIN bloque_codigo END PUNTO_COMA 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // caso ::= expresion DOS_PUNTOS stament_bloque 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Caso> a = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaCase(a, b, null, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos ELSE BEGIN bloque_codigo END PUNTO_COMA END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // setencia_case ::= CASE PAR_A expresion PAR_C OF casos ELSE stament_bloque END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Caso> b = (List<Caso>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setencia_case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, new BloqueCodigo(c, cleft, cright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament ELSE un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_if ::= IF PAR_A expresion PAR_C THEN BEGIN bloque_codigo END 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, new BloqueCodigo(b, bleft, bright), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_if ::= IF PAR_A expresion PAR_C THEN un_stament 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a, b, null, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= IDENTIFICADOR COR_A expresion COR_C IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignacionArray(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignacion(a, e, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // id_variable ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ids_variables ::= id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ids_variables ::= ids_variables COMA id_variable 
            {
              List<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids_variables",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // atributo_record ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributo_record ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributo_record ::= ids_variables DOS_PUNTOS PACKED ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              AtributoRecord RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo_record",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributos_record ::= atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord a = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributos_record ::= atributos_record atributo_record 
            {
              List<AtributoRecord> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<AtributoRecord> a = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AtributoRecord b = (AtributoRecord)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos_record",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_record ::= VAR IDENTIFICADOR DOS_PUNTOS RECORD atributos_record END PUNTO_COMA 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<AtributoRecord> b = (List<AtributoRecord>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_record",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(5, ids, e1, e2, id, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable ::= ids_variables DOS_PUNTOS ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(4, ids, e1, e2, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable ::= ids_variables DOS_PUNTOS expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(3, ids, e1, e2, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable ::= ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(2, ids, a, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable ::= ids_variables DOS_PUNTOS data_type IGUALACION expresion PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), e, idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= ids_variables DOS_PUNTOS data_type PUNTO_COMA 
            {
              Variable RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Variable(1, ids, new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variables ::= variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variables ::= variables variable 
            {
              List<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> a = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable b = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_variable ::= VAR variables 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Variable> b = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante ::= IDENTIFICADOR IGUALACION expresion PUNTO_COMA 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ex = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constante(id, ex, idleft, idright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constantes ::= constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante a = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constantes ::= constantes constante 
            {
              List<Constante> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Constante> a = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constante b = (Constante)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_contantes ::= CONST constantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Constante> b = (List<Constante>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionConstante(b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_contantes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= ids_variables IGUALACION ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo(DataType.ARRAY), new Tipo(a), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= ids_variables IGUALACION expresion TRES_PUNTO expresion PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, e1, e2, new Tipo("", DataType.SUBRANGO), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= ids_variables IGUALACION data_type PUNTO_COMA 
            {
              SentenciaTipo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataType d = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenciaTipo(ids, new Tipo(d), idsleft, idsright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos ::= tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo a = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos ::= tipos tipo 
            {
              List<SentenciaTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenciaTipo b = (SentenciaTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_tipos ::= TYPE tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SentenciaTipo> a = (List<SentenciaTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaracionTipos(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // un_stament ::= s_break 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // un_stament ::= s_continue 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // un_stament ::= llamada_funcion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // un_stament ::= repeat_until 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // un_stament ::= sentencia_for 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // un_stament ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // un_stament ::= setencia_case 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // un_stament ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // un_stament ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // un_stament ::= readline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // un_stament ::= writeline 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_stament",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stament_bloque ::= un_stament PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament_bloque",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque_codigo ::= stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque_codigo ::= bloque_codigo stament_bloque 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_params ::= expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_params ::= list_params COMA expresion 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // llamada_funcion ::= IDENTIFICADOR PAR_A PAR_C 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LlamadaFuncion(i, new ArrayList<Sentencia>(), ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // llamada_funcion ::= IDENTIFICADOR PAR_A list_params PAR_C 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LlamadaFuncion(i, a, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro ::= ids_variables DOS_PUNTOS IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, DataType.PERSONALIZADO, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro ::= ids_variables DOS_PUNTOS data_type 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, b, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= VAR ids_variables DOS_PUNTOS IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, DataType.PERSONALIZADO, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= VAR ids_variables DOS_PUNTOS data_type 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parametro(a, b, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= parametros PUNTO_COMA parametro 
            {
              List<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A PAR_C PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), null, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A parametros PAR_C PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(DataType.ANY), null, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A PAR_C PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedimiento ::= PROCEDURE IDENTIFICADOR PAR_A parametros PAR_C PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> c = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(DataType.ANY), b, c, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedimiento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones ::= FUNCTION IDENTIFICADOR PAR_A PAR_C DOS_PUNTOS data_type PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), null, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funciones ::= FUNCTION IDENTIFICADOR PAR_A parametros PAR_C DOS_PUNTOS data_type PUNTO_COMA BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(b), null, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funciones ::= FUNCTION IDENTIFICADOR PAR_A PAR_C DOS_PUNTOS data_type PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), c, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funciones ::= FUNCTION IDENTIFICADOR PAR_A parametros PAR_C DOS_PUNTOS data_type PUNTO_COMA declaracion_variable BEGIN bloque_codigo END PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Parametro> a = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DataType b = (DataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Funtion(i, a, new Tipo(b), c, d, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stament ::= procedimiento 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stament ::= funciones 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stament ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stament ::= declaracion_contantes 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stament ::= declaracion_tipos 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stament",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // staments ::= stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // staments ::= staments stament 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // component_program ::= staments BEGIN bloque_codigo END PUNTO 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> b = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProgramaPrincipal(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // components_program ::= component_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("components_program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // components_program ::= components_program component_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("components_program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM IDENTIFICADOR PUNTO_COMA components_program 
            {
              List<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> a = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> start_val = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

