// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

package com.baquiax.idepascal.backend;

import java_cup.runtime.*;
import java.util.*;
import com.baquiax.idepascal.backend.errores.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0,  4,  5,  6,  7,  8,  9, 10, 11, 12, 
    13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20,  0, 
     0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 30, 37, 38, 39, 40, 41, 42, 30, 43, 30, 44,  0, 45,  0, 46, 
     0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 30, 37, 38, 39, 40, 41, 42, 30, 43, 30, 47,  0, 48,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\24\24\1\25\1\26\1\27"+
    "\1\30\1\0\1\31\3\0\1\32\1\33\1\34\1\35"+
    "\11\24\1\36\6\24\1\37\1\40\4\24\1\41\1\42"+
    "\6\24\1\43\6\24\3\0\1\2\2\0\1\44\1\45"+
    "\1\46\7\24\1\47\2\24\1\50\1\24\1\51\5\24"+
    "\1\52\1\53\5\24\1\54\4\24\1\55\3\24\2\0"+
    "\1\2\4\24\1\56\1\57\3\24\1\60\1\61\1\24"+
    "\1\62\7\24\1\63\3\24\1\64\1\65\2\24\1\66"+
    "\1\24\1\0\1\67\1\70\1\24\1\71\1\72\4\24"+
    "\1\73\10\24\1\74\1\75\1\24\1\0\2\24\1\76"+
    "\3\24\1\77\2\24\1\100\1\101\1\102\1\24\1\103"+
    "\2\24\1\104\1\105\1\24\1\106\1\107\1\110\1\111"+
    "\1\24\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\304\0\365\0\u0126"+
    "\0\142\0\142\0\142\0\142\0\142\0\u0157\0\142\0\u0188"+
    "\0\u0188\0\u0188\0\u01b9\0\142\0\u01ea\0\142\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\142\0\142\0\u0620\0\142\0\365"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\142\0\142\0\142\0\142"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u03a3\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u03a3\0\u03a3"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u03a3\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0620\0\u0d66\0\u0d97"+
    "\0\u0620\0\u0dc8\0\u0df9\0\142\0\u06e4\0\u03a3\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u03a3\0\u0f81\0\u0fb2"+
    "\0\u03a3\0\u0fe3\0\u03a3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u03a3\0\u03a3\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u03a3"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u03a3\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u03a3"+
    "\0\u03a3\0\u147b\0\u14ac\0\u14dd\0\u03a3\0\u03a3\0\u150e\0\u03a3"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u03a3"+
    "\0\u1696\0\u16c7\0\u16f8\0\u03a3\0\u03a3\0\u1729\0\u175a\0\u03a3"+
    "\0\u178b\0\u17bc\0\u03a3\0\u03a3\0\u17ed\0\u03a3\0\u03a3\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u03a3\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u03a3\0\u03a3\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u03a3\0\u1b2e\0\u1b5f\0\u1b90\0\u03a3\0\u1bc1"+
    "\0\u1bf2\0\u03a3\0\u03a3\0\u03a3\0\u1c23\0\u03a3\0\u1c54\0\u1c85"+
    "\0\u03a3\0\u03a3\0\u1cb6\0\u03a3\0\u03a3\0\u03a3\0\u03a3\0\u1ce7"+
    "\0\u03a3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\37\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\37\1\54\1\55\1\3\1\56\1\57"+
    "\61\3\62\0\1\4\61\0\1\5\56\0\2\60\1\0"+
    "\1\60\1\61\54\60\7\0\1\62\64\0\1\63\60\0"+
    "\1\64\1\0\3\22\64\0\1\65\60\0\1\66\1\67"+
    "\57\0\1\70\52\0\3\37\5\0\15\37\1\71\2\37"+
    "\1\72\6\37\2\0\1\37\17\0\3\37\5\0\4\37"+
    "\1\73\11\37\1\74\1\37\1\75\6\37\2\0\1\37"+
    "\17\0\3\37\5\0\1\76\6\37\1\77\6\37\1\100"+
    "\10\37\2\0\1\37\17\0\3\37\5\0\10\37\1\101"+
    "\5\37\1\102\10\37\2\0\1\37\17\0\3\37\5\0"+
    "\13\37\1\103\1\37\1\104\11\37\2\0\1\37\17\0"+
    "\3\37\5\0\10\37\1\105\5\37\1\106\4\37\1\107"+
    "\3\37\2\0\1\37\17\0\3\37\5\0\16\37\1\110"+
    "\10\37\2\0\1\37\17\0\3\37\5\0\27\37\2\0"+
    "\1\37\17\0\3\37\5\0\5\37\1\111\7\37\1\112"+
    "\11\37\2\0\1\37\17\0\3\37\5\0\1\113\15\37"+
    "\1\114\10\37\2\0\1\37\17\0\3\37\5\0\16\37"+
    "\1\115\10\37\2\0\1\37\17\0\3\37\5\0\16\37"+
    "\1\116\10\37\2\0\1\37\17\0\3\37\5\0\5\37"+
    "\1\117\12\37\1\120\6\37\2\0\1\37\17\0\3\37"+
    "\5\0\1\121\17\37\1\122\6\37\2\0\1\37\17\0"+
    "\3\37\5\0\4\37\1\123\22\37\2\0\1\37\17\0"+
    "\3\37\5\0\4\37\1\124\15\37\1\125\4\37\2\0"+
    "\1\37\17\0\3\37\5\0\7\37\1\126\6\37\1\127"+
    "\7\37\1\130\2\0\1\37\17\0\3\37\5\0\15\37"+
    "\1\131\11\37\2\0\1\37\17\0\3\37\5\0\1\132"+
    "\26\37\2\0\1\37\17\0\3\37\5\0\7\37\1\133"+
    "\1\134\7\37\1\135\6\37\2\0\1\37\2\0\2\136"+
    "\1\137\1\140\54\136\1\141\4\0\1\60\54\0\7\142"+
    "\1\143\51\142\13\0\1\144\62\0\3\145\56\0\3\37"+
    "\5\0\3\37\1\146\23\37\2\0\1\37\17\0\3\37"+
    "\5\0\20\37\1\147\6\37\2\0\1\37\17\0\3\37"+
    "\5\0\6\37\1\150\20\37\2\0\1\37\17\0\3\37"+
    "\5\0\16\37\1\151\10\37\2\0\1\37\17\0\3\37"+
    "\5\0\4\37\1\152\22\37\2\0\1\37\17\0\3\37"+
    "\5\0\21\37\1\153\5\37\2\0\1\37\17\0\3\37"+
    "\5\0\1\154\26\37\2\0\1\37\17\0\3\37\5\0"+
    "\15\37\1\155\11\37\2\0\1\37\17\0\3\37\5\0"+
    "\24\37\1\156\2\37\2\0\1\37\17\0\3\37\5\0"+
    "\25\37\1\157\1\37\2\0\1\37\17\0\3\37\5\0"+
    "\21\37\1\160\5\37\2\0\1\37\17\0\3\37\5\0"+
    "\3\37\1\161\23\37\2\0\1\37\17\0\3\37\5\0"+
    "\13\37\1\162\13\37\2\0\1\37\17\0\3\37\5\0"+
    "\20\37\1\163\6\37\2\0\1\37\17\0\3\37\5\0"+
    "\15\37\1\164\11\37\2\0\1\37\17\0\3\37\5\0"+
    "\22\37\1\165\4\37\2\0\1\37\17\0\3\37\5\0"+
    "\22\37\1\166\4\37\2\0\1\37\17\0\3\37\5\0"+
    "\1\37\1\167\25\37\2\0\1\37\17\0\3\37\5\0"+
    "\15\37\1\170\11\37\2\0\1\37\17\0\3\37\5\0"+
    "\3\37\1\171\23\37\2\0\1\37\17\0\3\37\5\0"+
    "\22\37\1\172\4\37\2\0\1\37\17\0\3\37\5\0"+
    "\2\37\1\173\24\37\2\0\1\37\17\0\3\37\5\0"+
    "\16\37\1\174\10\37\2\0\1\37\17\0\3\37\5\0"+
    "\1\175\1\37\1\176\14\37\1\177\7\37\2\0\1\37"+
    "\17\0\3\37\5\0\22\37\1\200\4\37\2\0\1\37"+
    "\17\0\3\37\5\0\20\37\1\201\6\37\2\0\1\37"+
    "\17\0\3\37\5\0\4\37\1\202\22\37\2\0\1\37"+
    "\17\0\3\37\5\0\17\37\1\203\7\37\2\0\1\37"+
    "\17\0\3\37\5\0\22\37\1\204\4\37\2\0\1\37"+
    "\17\0\3\37\5\0\20\37\1\205\6\37\2\0\1\37"+
    "\17\0\3\37\5\0\10\37\1\206\16\37\2\0\1\37"+
    "\17\0\3\37\5\0\22\37\1\207\4\37\2\0\1\37"+
    "\17\0\3\37\5\0\10\37\1\210\16\37\2\0\1\37"+
    "\62\0\1\5\2\0\1\137\55\0\1\5\7\142\1\211"+
    "\51\142\6\212\1\213\1\143\4\212\1\0\44\212\15\0"+
    "\3\37\5\0\1\214\26\37\2\0\1\37\17\0\3\37"+
    "\5\0\10\37\1\215\16\37\2\0\1\37\17\0\3\37"+
    "\5\0\13\37\1\216\13\37\2\0\1\37\17\0\3\37"+
    "\5\0\1\217\26\37\2\0\1\37\17\0\3\37\5\0"+
    "\4\37\1\220\22\37\2\0\1\37\17\0\3\37\5\0"+
    "\20\37\1\221\6\37\2\0\1\37\17\0\3\37\5\0"+
    "\21\37\1\222\1\223\4\37\2\0\1\37\17\0\3\37"+
    "\5\0\15\37\1\224\11\37\2\0\1\37\17\0\3\37"+
    "\5\0\4\37\1\225\22\37\2\0\1\37\17\0\3\37"+
    "\5\0\4\37\1\226\22\37\2\0\1\37\17\0\3\37"+
    "\5\0\2\37\1\227\24\37\2\0\1\37\17\0\3\37"+
    "\5\0\16\37\1\230\10\37\2\0\1\37\17\0\3\37"+
    "\5\0\4\37\1\231\22\37\2\0\1\37\17\0\3\37"+
    "\5\0\4\37\1\232\22\37\2\0\1\37\17\0\3\37"+
    "\5\0\6\37\1\233\20\37\2\0\1\37\17\0\3\37"+
    "\5\0\12\37\1\234\14\37\2\0\1\37\17\0\3\37"+
    "\5\0\2\37\1\235\3\37\1\236\20\37\2\0\1\37"+
    "\17\0\3\37\5\0\3\37\1\237\7\37\1\240\13\37"+
    "\2\0\1\37\17\0\3\37\5\0\16\37\1\241\10\37"+
    "\2\0\1\37\17\0\3\37\5\0\4\37\1\242\22\37"+
    "\2\0\1\37\17\0\3\37\5\0\10\37\1\243\16\37"+
    "\2\0\1\37\17\0\3\37\5\0\15\37\1\244\11\37"+
    "\2\0\1\37\17\0\3\37\5\0\4\37\1\245\22\37"+
    "\2\0\1\37\17\0\3\37\5\0\10\37\1\246\16\37"+
    "\2\0\1\37\17\0\3\37\5\0\13\37\1\247\13\37"+
    "\2\0\1\37\17\0\3\37\5\0\7\37\1\250\17\37"+
    "\2\0\1\37\17\0\3\37\5\0\22\37\1\251\4\37"+
    "\2\0\1\37\2\0\6\142\1\213\1\211\4\142\1\252"+
    "\44\142\7\212\1\143\51\212\15\0\3\37\5\0\26\37"+
    "\1\253\2\0\1\37\17\0\3\37\5\0\15\37\1\254"+
    "\11\37\2\0\1\37\17\0\3\37\5\0\4\37\1\255"+
    "\22\37\2\0\1\37\17\0\3\37\5\0\12\37\1\256"+
    "\14\37\2\0\1\37\17\0\3\37\5\0\22\37\1\257"+
    "\4\37\2\0\1\37\17\0\3\37\5\0\10\37\1\260"+
    "\16\37\2\0\1\37\17\0\3\37\5\0\22\37\1\261"+
    "\4\37\2\0\1\37\17\0\3\37\5\0\22\37\1\262"+
    "\4\37\2\0\1\37\17\0\3\37\5\0\6\37\1\263"+
    "\20\37\2\0\1\37\17\0\3\37\5\0\13\37\1\264"+
    "\13\37\2\0\1\37\17\0\3\37\5\0\10\37\1\265"+
    "\16\37\2\0\1\37\17\0\3\37\5\0\4\37\1\266"+
    "\22\37\2\0\1\37\17\0\3\37\5\0\4\37\1\267"+
    "\22\37\2\0\1\37\17\0\3\37\5\0\20\37\1\270"+
    "\6\37\2\0\1\37\17\0\3\37\5\0\13\37\1\271"+
    "\13\37\2\0\1\37\17\0\3\37\5\0\20\37\1\272"+
    "\6\37\2\0\1\37\17\0\3\37\5\0\1\273\26\37"+
    "\2\0\1\37\17\0\3\37\5\0\15\37\1\274\11\37"+
    "\2\0\1\37\17\0\3\37\5\0\13\37\1\275\13\37"+
    "\2\0\1\37\17\0\3\37\5\0\4\37\1\276\22\37"+
    "\2\0\1\37\17\0\3\37\5\0\4\37\1\277\22\37"+
    "\2\0\1\37\2\0\7\252\1\300\51\252\15\0\3\37"+
    "\5\0\1\301\26\37\2\0\1\37\17\0\3\37\5\0"+
    "\15\37\1\302\11\37\2\0\1\37\17\0\3\37\5\0"+
    "\16\37\1\303\10\37\2\0\1\37\17\0\3\37\5\0"+
    "\10\37\1\304\16\37\2\0\1\37\17\0\3\37\5\0"+
    "\4\37\1\305\22\37\2\0\1\37\17\0\3\37\5\0"+
    "\15\37\1\306\11\37\2\0\1\37\17\0\3\37\5\0"+
    "\3\37\1\307\23\37\2\0\1\37\17\0\3\37\5\0"+
    "\3\37\1\310\23\37\2\0\1\37\17\0\3\37\5\0"+
    "\1\311\26\37\2\0\1\37\17\0\3\37\5\0\15\37"+
    "\1\312\11\37\2\0\1\37\17\0\3\37\5\0\3\37"+
    "\1\313\23\37\2\0\1\37\17\0\3\37\5\0\22\37"+
    "\1\312\4\37\2\0\1\37\17\0\3\37\5\0\6\37"+
    "\1\314\20\37\2\0\1\37\17\0\3\37\5\0\13\37"+
    "\1\315\13\37\2\0\1\37\2\0\6\252\1\5\1\300"+
    "\51\252\15\0\3\37\5\0\15\37\1\316\11\37\2\0"+
    "\1\37\17\0\3\37\5\0\23\37\1\317\3\37\2\0"+
    "\1\37\17\0\3\37\5\0\16\37\1\320\10\37\2\0"+
    "\1\37\17\0\3\37\5\0\20\37\1\321\6\37\2\0"+
    "\1\37\17\0\3\37\5\0\22\37\1\322\4\37\2\0"+
    "\1\37\17\0\3\37\5\0\23\37\1\323\3\37\2\0"+
    "\1\37\17\0\3\37\5\0\14\37\1\324\12\37\2\0"+
    "\1\37\17\0\3\37\5\0\15\37\1\325\11\37\2\0"+
    "\1\37\17\0\3\37\5\0\4\37\1\326\22\37\2\0"+
    "\1\37\17\0\3\37\5\0\15\37\1\327\11\37\2\0"+
    "\1\37\17\0\3\37\5\0\20\37\1\330\6\37\2\0"+
    "\1\37\17\0\3\37\5\0\4\37\1\331\22\37\2\0"+
    "\1\37\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7448];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\5\11\1\1\1\11"+
    "\4\1\1\11\1\1\1\11\25\1\2\11\1\1\1\11"+
    "\1\0\1\1\3\0\4\11\45\1\3\0\1\1\2\0"+
    "\1\11\44\1\2\0\37\1\1\0\25\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    
    public List<ErrorPascal> listErrores = new ArrayList<>();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private Symbol symbol(int type, Object value, int row, int col) {
        return new Symbol(type, row+1, col+1, value);
    }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listErrores.add(new ErrorPascal(TipoError.LEXICO.name(),
                                                    "El carácter " + yytext() + " no es aceptado en el lenguaje. ",
                                                    yyline + 1, yycolumn + 1));
            }
          // fall through
          case 75: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 76: break;
          case 3:
            { return symbol(sym.COMILLA, yytext());
            }
          // fall through
          case 77: break;
          case 4:
            { return symbol(sym.PAR_A, yytext());
            }
          // fall through
          case 78: break;
          case 5:
            { return symbol(sym.PAR_C, yytext());
            }
          // fall through
          case 79: break;
          case 6:
            { return symbol(sym.MULTI, yytext());
            }
          // fall through
          case 80: break;
          case 7:
            { return symbol(sym.SUMA, yytext());
            }
          // fall through
          case 81: break;
          case 8:
            { return symbol(sym.COMA, yytext());
            }
          // fall through
          case 82: break;
          case 9:
            { return symbol(sym.MENOS, yytext());
            }
          // fall through
          case 83: break;
          case 10:
            { return symbol(sym.PUNTO, yytext());
            }
          // fall through
          case 84: break;
          case 11:
            { return symbol(sym.DIVISION, yytext());
            }
          // fall through
          case 85: break;
          case 12:
            { return symbol(sym.FALSE, yytext());
            }
          // fall through
          case 86: break;
          case 13:
            { return symbol(sym.TRUE, yytext());
            }
          // fall through
          case 87: break;
          case 14:
            { return symbol(sym.ENTERO, yytext());
            }
          // fall through
          case 88: break;
          case 15:
            { return symbol(sym.DOS_PUNTOS, yytext());
            }
          // fall through
          case 89: break;
          case 16:
            { return symbol(sym.PUNTO_COMA, yytext());
            }
          // fall through
          case 90: break;
          case 17:
            { return symbol(sym.MENOR, yytext());
            }
          // fall through
          case 91: break;
          case 18:
            { return symbol(sym.IGUALACION, yytext());
            }
          // fall through
          case 92: break;
          case 19:
            { return symbol(sym.MAYOR, yytext());
            }
          // fall through
          case 93: break;
          case 20:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 94: break;
          case 21:
            { return symbol(sym.COR_A, yytext());
            }
          // fall through
          case 95: break;
          case 22:
            { return symbol(sym.COR_C, yytext());
            }
          // fall through
          case 96: break;
          case 23:
            { return symbol(sym.LLAVE_A, yytext());
            }
          // fall through
          case 97: break;
          case 24:
            { return symbol(sym.LLAVE_C, yytext());
            }
          // fall through
          case 98: break;
          case 25:
            { return symbol(sym.CADENA, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 99: break;
          case 26:
            { return symbol(sym.IGUAL, yytext());
            }
          // fall through
          case 100: break;
          case 27:
            { return symbol(sym.MENOR_IGUAL, yytext());
            }
          // fall through
          case 101: break;
          case 28:
            { return symbol(sym.DIFERENTE, yytext());
            }
          // fall through
          case 102: break;
          case 29:
            { return symbol(sym.MAYOR_IGUAL, yytext());
            }
          // fall through
          case 103: break;
          case 30:
            { return symbol(sym.DO, yytext());
            }
          // fall through
          case 104: break;
          case 31:
            { return symbol(sym.IF, yytext());
            }
          // fall through
          case 105: break;
          case 32:
            { return symbol(sym.IN, yytext());
            }
          // fall through
          case 106: break;
          case 33:
            { return symbol(sym.OF, yytext());
            }
          // fall through
          case 107: break;
          case 34:
            { return symbol(sym.OR, yytext());
            }
          // fall through
          case 108: break;
          case 35:
            { return symbol(sym.TO, yytext());
            }
          // fall through
          case 109: break;
          case 36:
            { return symbol(sym.TRES_PUNTO, yytext());
            }
          // fall through
          case 110: break;
          case 37:
            { return symbol(sym.DECIMAL, yytext());
            }
          // fall through
          case 111: break;
          case 38:
            { return symbol(sym.AND, yytext());
            }
          // fall through
          case 112: break;
          case 39:
            { return symbol(sym.DIV, yytext());
            }
          // fall through
          case 113: break;
          case 40:
            { return symbol(sym.END, yytext());
            }
          // fall through
          case 114: break;
          case 41:
            { return symbol(sym.FOR, yytext());
            }
          // fall through
          case 115: break;
          case 42:
            { return symbol(sym.MOD, yytext());
            }
          // fall through
          case 116: break;
          case 43:
            { return symbol(sym.NOT, yytext());
            }
          // fall through
          case 117: break;
          case 44:
            { return symbol(sym.SET, yytext());
            }
          // fall through
          case 118: break;
          case 45:
            { return symbol(sym.VAR, yytext());
            }
          // fall through
          case 119: break;
          case 46:
            { return symbol(sym.CASE, yytext());
            }
          // fall through
          case 120: break;
          case 47:
            { return symbol(sym.TKCHAR, yytext());
            }
          // fall through
          case 121: break;
          case 48:
            { return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 122: break;
          case 49:
            { return symbol(sym.FILE, yytext());
            }
          // fall through
          case 123: break;
          case 50:
            { return symbol(sym.GOTO, yytext());
            }
          // fall through
          case 124: break;
          case 51:
            { return symbol(sym.REAL, yytext());
            }
          // fall through
          case 125: break;
          case 52:
            { return symbol(sym.THEN, yytext());
            }
          // fall through
          case 126: break;
          case 53:
            { return symbol(sym.TYPE, yytext());
            }
          // fall through
          case 127: break;
          case 54:
            { return symbol(sym.WITH, yytext());
            }
          // fall through
          case 128: break;
          case 55:
            { return symbol(sym.ARRAY, yytext());
            }
          // fall through
          case 129: break;
          case 56:
            { return symbol(sym.BEGIN, yytext());
            }
          // fall through
          case 130: break;
          case 57:
            { return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 131: break;
          case 58:
            { return symbol(sym.CONST, yytext());
            }
          // fall through
          case 132: break;
          case 59:
            { return symbol(sym.LABEL, yytext());
            }
          // fall through
          case 133: break;
          case 60:
            { return symbol(sym.UNTIL, yytext());
            }
          // fall through
          case 134: break;
          case 61:
            { return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 135: break;
          case 62:
            { return symbol(sym.DOWNTO, yytext());
            }
          // fall through
          case 136: break;
          case 63:
            { return symbol(sym.PACKED, yytext());
            }
          // fall through
          case 137: break;
          case 64:
            { return symbol(sym.REPEAT, yytext());
            }
          // fall through
          case 138: break;
          case 65:
            { return symbol(sym.RECORD, yytext());
            }
          // fall through
          case 139: break;
          case 66:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 140: break;
          case 67:
            { return symbol(sym.BOOLEAN, yytext());
            }
          // fall through
          case 141: break;
          case 68:
            { return symbol(sym.INTEGER, yytext());
            }
          // fall through
          case 142: break;
          case 69:
            { return symbol(sym.LONGINT, yytext());
            }
          // fall through
          case 143: break;
          case 70:
            { return symbol(sym.PROGRAM, yytext());
            }
          // fall through
          case 144: break;
          case 71:
            { return symbol(sym.WRITELN, yytext());
            }
          // fall through
          case 145: break;
          case 72:
            { return symbol(sym.CONTINUE, yytext());
            }
          // fall through
          case 146: break;
          case 73:
            { return symbol(sym.FUNCTION, yytext());
            }
          // fall through
          case 147: break;
          case 74:
            { return symbol(sym.PROCEDURE, yytext());
            }
          // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
