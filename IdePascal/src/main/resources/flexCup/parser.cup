
package com.baquiax.idepascal.backend;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
//errores
import com.baquiax.idepascal.backend.errores.*;
//sentencia
import com.baquiax.idepascal.backend.stament.*;
//simbol, tabla-simbolos/entorno, AST
import com.baquiax.idepascal.backend.simbol.*;
//expresiones
import com.baquiax.idepascal.backend.expresion.*;
import com.baquiax.idepascal.backend.expresion.operacion.aritmetica.*;
import com.baquiax.idepascal.backend.expresion.operacion.booleanos.*;
import com.baquiax.idepascal.backend.expresion.operacion.relacional.*;
import com.baquiax.idepascal.backend.expresion.accesovariable.*;
//declaraciones
import com.baquiax.idepascal.backend.declaracion.*;
import com.baquiax.idepascal.backend.sentencias.*;
//funciones
import com.baquiax.idepascal.backend.funcion.*;
//simbol
import com.baquiax.idepascal.backend.simbol.*;

parser code {:

    public Parser(Lexer lexer){
    super(lexer);
    }

    public List<ErrorPascal> listaErrores = new ArrayList<>();

    public void syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value) + " lin,col: " +s.left +" "+s.right;
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.RECUPERABLE.name(), description, s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) {
            String description = "No se esperaba el componente: " + (s.value);
            System.out.println(description);
            listaErrores.add(new ErrorPascal(TipoError.IRECUPERABLE.name(), description, s.left, s.right));
    }
:};

action code
{:
:}

terminal AND, ARRAY, BEGIN, BREAK, CASE, CONST, TKCHAR, CONTINUE, DIV, DO, DOWNTO, ELSE, END;
terminal FILE, FUNCTION, GOTO, IF, IN, LABEL, MOD, NOT, OF, OR, PACKED, PROCEDURE;
terminal PROGRAM, RECORD, REAL, REPEAT, READLN, SET, THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH;
terminal WRITELN, INTEGER, FOR, MENOS, SUMA, MULTI, DIVISION, IGUAL, COMA, PUNTO_COMA;
terminal PUNTO, TRES_PUNTO, DOS_PUNTOS, PAR_A, PAR_C, COR_A, COR_C, IGUALACION, LLAVE_A, LLAVE_C, COMILLA;
terminal DIFERENTE, MAYOR, MENOR, MENOR_IGUAL, MAYOR_IGUAL;
terminal LONGINT, STRING, BOOLEAN, UNARIO, AND_THEN, OR_ELSE;
terminal String IDENTIFICADOR, ENTERO, DECIMAL, CADENA, TRUE, FALSE;
//terminal CARCTER;

//nonterminal
nonterminal List<Sentencia> inicio, staments, components_program;
nonterminal List<Sentencia> bloque_codigo, list_params;
nonterminal Sentencia stament, component_program, stament_bloque, setencia_case, op_tipos, op_vars, op_consts, op_fun, op_proce;
nonterminal Sentencia funciones, procedimiento;
nonterminal List<Parametro> parametros;
nonterminal Parametro parametro;
nonterminal List<Caso> casos;
nonterminal Caso caso;
nonterminal Sentencia un_stament, un_stament_punto_coma;
nonterminal Sentencia declaracion_tipos;
nonterminal List<SentenciaTipo> tipos;
nonterminal SentenciaTipo tipo;
nonterminal Sentencia declaracion_contantes;
nonterminal List<Constante> constantes;
nonterminal Constante constante;
//variables
nonterminal Sentencia declaracion_variable;
nonterminal List<Variable> variables;
nonterminal Variable variable, variable_record;
nonterminal List<AtributoRecord> atributos_record;
nonterminal AtributoRecord atributo_record;
nonterminal List<String> ids_variables;
nonterminal String id_variable;
nonterminal Sentencia expresion, condicion;
nonterminal List<Sentencia> parametros_write;
nonterminal Sentencia llamada_funcion, writeline, readline, s_break, s_continue;
nonterminal Sentencia asignacion;
//sentencias, ciclos
nonterminal Sentencia sentencia_if, sentencia_while, sentencia_for, repeat_until;
//expresiones
nonterminal Sentencia valor;
nonterminal DataType data_type, data_type_record;

precedence left AND_THEN, OR_ELSE;
precedence left OR;
precedence left AND;
precedence left IGUALACION, DIFERENTE, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL;
precedence left SUMA, MENOS;
precedence left MULTI, DIVISION, DIV, MOD;
precedence left UNARIO, NOT;

precedence left ELSE;

start with inicio;

inicio::= PROGRAM IDENTIFICADOR PUNTO_COMA components_program:a {: RESULT = a; :}
;

components_program::= components_program:a component_program:b {: RESULT = a; RESULT.add(b); :}
                    | component_program:a {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

component_program::= staments:a BEGIN bloque_codigo:b END PUNTO
                    {: RESULT = new ProgramaPrincipal(a, b, aleft, aright); :}
;

staments::=   staments:a stament:b  {: RESULT = a; RESULT.add(b); :}
            | stament:a  {: RESULT = new ArrayList<>(); RESULT.add(a); :}
            | error PUNTO_COMA
;

stament::=    declaracion_tipos:a       {: RESULT = a; :}
            | declaracion_contantes:a   {: RESULT = a; :}
            | declaracion_variable:a    {: RESULT = a; :}
            | funciones:a               {: RESULT = a; :}
            | procedimiento:a           {: RESULT = a; :}
;

funciones::=  FUNCTION IDENTIFICADOR:i PAR_A parametros:a PAR_C DOS_PUNTOS data_type:b PUNTO_COMA declaracion_variable:c BEGIN bloque_codigo:d END PUNTO_COMA
                {: RESULT = new Funtion(i, a, new Tipo(b), c, d, ileft, iright); :}
            | FUNCTION IDENTIFICADOR:i PAR_A PAR_C DOS_PUNTOS data_type:b PUNTO_COMA declaracion_variable:c BEGIN bloque_codigo:d END PUNTO_COMA
                {: RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), c, d, ileft, iright); :}
            | FUNCTION IDENTIFICADOR:i PAR_A parametros:a PAR_C DOS_PUNTOS data_type:b PUNTO_COMA BEGIN bloque_codigo:d END PUNTO_COMA
                {: RESULT = new Funtion(i, a, new Tipo(b), null, d, ileft, iright); :}
            | FUNCTION IDENTIFICADOR:i PAR_A PAR_C DOS_PUNTOS data_type:b PUNTO_COMA BEGIN bloque_codigo:d END PUNTO_COMA
                {: RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(b), null, d, ileft, iright); :}
;

procedimiento::= PROCEDURE IDENTIFICADOR:i PAR_A parametros:a PAR_C PUNTO_COMA declaracion_variable:b BEGIN bloque_codigo:c END PUNTO_COMA
                    {: RESULT = new Funtion(i, a, new Tipo(DataType.ANY), b, c, ileft, iright); :}
               | PROCEDURE IDENTIFICADOR:i PAR_A PAR_C PUNTO_COMA declaracion_variable:b BEGIN bloque_codigo:c END PUNTO_COMA
                    {: RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), b, c, ileft, iright); :}
               | PROCEDURE IDENTIFICADOR:i PAR_A parametros:a PAR_C PUNTO_COMA BEGIN bloque_codigo:c END PUNTO_COMA
                    {: RESULT = new Funtion(i, a, new Tipo(DataType.ANY), null, c, ileft, iright); :}
               | PROCEDURE IDENTIFICADOR:i PAR_A PAR_C PUNTO_COMA BEGIN bloque_codigo:c END PUNTO_COMA
                    {: RESULT = new Funtion(i, new ArrayList<Parametro>(), new Tipo(DataType.ANY), null, c, ileft, iright); :}
;

parametros::= parametros:a PUNTO_COMA parametro:b {: RESULT = a; RESULT.add(b); :}
            | parametro:a {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

parametro::=  VAR ids_variables:a DOS_PUNTOS data_type:b         {: RESULT = new Parametro(a, b, ""); :}
            | VAR ids_variables:a DOS_PUNTOS IDENTIFICADOR:b     {: RESULT = new Parametro(a, DataType.PERSONALIZADO, b); :}
            | ids_variables:a DOS_PUNTOS data_type:b             {: RESULT = new Parametro(a, b, ""); :}
            | ids_variables:a DOS_PUNTOS IDENTIFICADOR:b         {: RESULT = new Parametro(a, DataType.PERSONALIZADO, b); :}
;

llamada_funcion::= IDENTIFICADOR:i PAR_A list_params:a PAR_C
                    {: RESULT = new LlamadaFuncion(i, a, ileft, iright); :}
                 | IDENTIFICADOR:i PAR_A PAR_C
                    {: RESULT = new LlamadaFuncion(i, new ArrayList<Sentencia>(), ileft, iright); :}
;

//parametros que se usaran al llamar una funcion
list_params::= list_params:a COMA expresion:b {: RESULT = a; RESULT.add(b); :}
             | expresion:a {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

bloque_codigo::= bloque_codigo:a stament_bloque:b    {: RESULT = a; RESULT.add(b); :}
                    | stament_bloque:a                         {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

stament_bloque::= un_stament:a PUNTO_COMA     {: RESULT = a; :}
;

un_stament::= writeline:a       {: RESULT = a; :}
            | readline:a        {: RESULT = a; :}
            | asignacion:a      {: RESULT = a; :}
            | sentencia_if:a    {: RESULT = a; :}
            | setencia_case:a   {: RESULT = a; :}
            | sentencia_while:a {: RESULT = a; :}
            | sentencia_for:a   {: RESULT = a; :}
            | repeat_until:a    {: RESULT = a; :}
            | llamada_funcion:a {: RESULT = a; :}
            | s_continue:a      {: RESULT = a; :}
            | s_break:a         {: RESULT = a; :}
            | error PUNTO_COMA
;


declaracion_tipos::= TYPE tipos:a   {: RESULT = new DeclaracionTipos(a, aleft, aright); :}
;

tipos::=  tipos:a tipo:b    {: RESULT = a; RESULT.add(b); :}
        | tipo:a            {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

tipo::=   ids_variables:ids IGUALACION data_type:d PUNTO_COMA
            {: RESULT = new SentenciaTipo(ids, new Tipo(d), idsleft, idsright); :}
        | ids_variables:ids IGUALACION expresion:e1 TRES_PUNTO expresion:e2 PUNTO_COMA
            {: RESULT = new SentenciaTipo(ids, e1, e2, new Tipo("", DataType.SUBRANGO), idsleft, idsright); :}
        | ids_variables:ids IGUALACION ARRAY COR_A expresion:e1 PUNTO PUNTO expresion:e2 COR_C OF data_type:a PUNTO_COMA
            {: RESULT = new SentenciaTipo(ids, e1, e2, new Tipo(DataType.ARRAY), new Tipo(a), idsleft, idsright); :}
;

declaracion_contantes::= CONST:a constantes:b {: RESULT = new DeclaracionConstante(b, aleft, aright); :}
;
constantes::= constantes:a constante:b  {: RESULT =  a; RESULT.add(b); :}
            | constante:a               {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;


constante::= IDENTIFICADOR:id IGUALACION expresion:ex PUNTO_COMA {: RESULT = new Constante(id, ex, idleft, idright); :}
;

declaracion_variable::= VAR:a variables:b {: RESULT = new DeclaracionVariable(b, aleft, aright); :}
;

variables::=  variables:a variable:b    {: RESULT = a; RESULT.add(b); :}
            | variable:a                {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

variable::=   ids_variables:ids DOS_PUNTOS data_type:a PUNTO_COMA
                {: RESULT = new Variable(1, ids, new Tipo(a), idsleft, idsright); :}
            | ids_variables:ids DOS_PUNTOS data_type:a IGUALACION expresion:e PUNTO_COMA
                {: RESULT = new Variable(1, ids, new Tipo(a), e, idsleft, idsright); :}
            | ids_variables:ids DOS_PUNTOS IDENTIFICADOR:a PUNTO_COMA
                {: RESULT = new Variable(2, ids, a, idsleft, idsright); :}
            | ids_variables:ids DOS_PUNTOS expresion:e1 TRES_PUNTO expresion:e2 PUNTO_COMA
                {: RESULT = new Variable(3, ids, e1, e2, idsleft, idsright); :}
            | ids_variables:ids DOS_PUNTOS ARRAY COR_A expresion:e1 PUNTO PUNTO expresion:e2 COR_C OF data_type:a PUNTO_COMA
                {: RESULT = new Variable(4, ids, e1, e2, new Tipo(a), idsleft, idsright); :}
            | ids_variables:ids DOS_PUNTOS ARRAY COR_A expresion:e1 PUNTO PUNTO expresion:e2 COR_C OF IDENTIFICADOR:id PUNTO_COMA
                {: RESULT = new Variable(5, ids, e1, e2, id, idsleft, idsright); :}
;

//variable record
variable_record::= VAR:a IDENTIFICADOR:id DOS_PUNTOS RECORD atributos_record:b END PUNTO_COMA
;

atributos_record::=   atributos_record:a atributo_record:b  {: RESULT = a; RESULT.add(b); :}
                    | atributo_record:a                     {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

atributo_record::=    ids_variables DOS_PUNTOS PACKED ARRAY COR_A expresion PUNTO PUNTO expresion COR_C OF data_type PUNTO_COMA
                    | ids_variables DOS_PUNTOS data_type PUNTO_COMA
                    | ids_variables DOS_PUNTOS IDENTIFICADOR PUNTO_COMA
;

ids_variables::=  ids_variables:a COMA id_variable:b    {: RESULT = a; RESULT.add(b); :}
                | id_variable:a                         {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

id_variable::= IDENTIFICADOR:a {: RESULT = a; :}
;

//asignacion de variables
asignacion::= IDENTIFICADOR:a IGUAL expresion:e     {: RESULT = new Asignacion(a, e, aleft, aright); :}
            | IDENTIFICADOR:a COR_A expresion:b COR_C IGUAL expresion:c {: RESULT = new AsignacionArray(a, b, c, aleft, aright); :}
;

//sentencias

sentencia_if::=   IF:i PAR_A expresion:a PAR_C THEN un_stament:b {: RESULT = new If(a, b, null, ileft, iright); :}
                | IF:i PAR_A expresion:a PAR_C THEN BEGIN bloque_codigo:b END {: RESULT = new If(a, new BloqueCodigo(b, bleft, bright), ileft, iright); :}
                | IF:i PAR_A expresion:a PAR_C THEN un_stament:b ELSE un_stament:c {: RESULT = new If(a, b, c, ileft, iright); :}
                | IF:i PAR_A expresion:a PAR_C THEN un_stament:b ELSE BEGIN bloque_codigo:c END {: RESULT = new If(a, b, new BloqueCodigo(c, cleft, cright), ileft, iright); :}
                | IF:i PAR_A expresion:a PAR_C THEN BEGIN bloque_codigo:b END ELSE un_stament:c {: RESULT = new If(a, new BloqueCodigo(b, bleft, bright), c, ileft, iright); :}
                | IF:i PAR_A expresion:a PAR_C THEN BEGIN bloque_codigo:b END ELSE BEGIN bloque_codigo:c END
                    {: RESULT = new If(a, new BloqueCodigo(b, bleft, bright), new BloqueCodigo(c, cleft, cright), ileft, iright); :}
;

setencia_case::=  CASE:i PAR_A expresion:a PAR_C OF casos:b ELSE stament_bloque:c END
                    {: RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); :}
                | CASE:i PAR_A expresion:a PAR_C OF casos:b ELSE BEGIN bloque_codigo:c END PUNTO_COMA END
                    {: RESULT = new SentenciaCase(a, b, new Caso(null, c, cleft, cright), ileft, iright); :}
                | CASE:i PAR_A expresion:a PAR_C OF casos:b END
                     {: RESULT = new SentenciaCase(a, b, null, ileft, iright); :}
;

casos::=  casos:a caso:b    {: RESULT = a; RESULT.add(b); :}
        | caso:a            {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

caso::=   expresion:a DOS_PUNTOS stament_bloque:b                       {: RESULT = new Caso(a, b, aleft, aright); :}
        | expresion:a DOS_PUNTOS BEGIN bloque_codigo:b END PUNTO_COMA   {: RESULT = new Caso(a, b, aleft, aright); :}
;

sentencia_while::= WHILE:i PAR_A expresion:a PAR_C DO BEGIN bloque_codigo:b END {: RESULT = new SentenciaWhile(a, b, ileft, iright); :}
;

sentencia_for::= FOR:i asignacion:a TO expresion:b DO BEGIN bloque_codigo:c END
                    {: RESULT = new SentenciaFor(a, b, c, ileft, iright); :}
;

repeat_until::= REPEAT:i bloque_codigo:a UNTIL expresion:b {: RESULT = new RepeatUntil(a, b, ileft, iright); :}
;

s_break::= BREAK:a {: RESULT = new SentenciaBreak(aleft, aright); :}
;

s_continue::= CONTINUE:a {: RESULT = new SentenciaContinue(aleft, aright); :}
;

//funciones
writeline::= WRITELN:a PAR_A parametros_write:list PAR_C {: RESULT = new WriteLine(list, aleft, aright); :}
;

readline::= READLN:a PAR_A parametros_write:list PAR_C {: RESULT = new Readline(list, aleft, aright); :}
;

parametros_write::=   parametros_write:a COMA expresion:b   {: RESULT = a; RESULT.add(b); :}
                    | expresion:a                           {: RESULT = new ArrayList<>(); RESULT.add(a); :}
;

expresion::=  expresion:a SUMA:c expresion:b            {: RESULT = new Suma(a, b, aleft, aright); :}
            | expresion:a MENOS expresion:b             {: RESULT = new Resta(a, b, aleft, aright); :}
            | expresion:a MULTI expresion:b             {: RESULT = new Multiplicacion(a, b, aleft, aright); :}
            | expresion:a DIVISION expresion:b          {: RESULT = new Division(a, b, aleft, aright); :}
            | expresion:a DIV expresion:b               {: RESULT = new Division(a, b, aleft, aright); :}
            | expresion:a MOD expresion:b               {: RESULT = new Modulo(a, b, aleft, aright); :}
            | expresion:a IGUALACION expresion:b        {: RESULT = new Igual(a, b, aleft, aright); :}
            | expresion:a DIFERENTE expresion:b         {: RESULT = new Diferente(a, b, aleft, aright); :}
            | expresion:a MAYOR expresion:b             {: RESULT = new Mayor(a, b, aleft, aright); :}
            | expresion:a MENOR expresion:b             {: RESULT = new Menor(a, b, aleft, aright); :}
            | expresion:a MAYOR_IGUAL expresion:b       {: RESULT = new MayorIgual(a, b, aleft, aright); :}
            | expresion:a MENOR_IGUAL expresion:b       {: RESULT = new MenorIgual(a, b, aleft, aright); :}
            | expresion:a AND expresion:b               {: RESULT = new And(a, b, aleft, aright); :}
            | expresion:a OR expresion:b                {: RESULT = new OR(a, b, aleft, aright); :}
            | expresion:a AND THEN expresion:b          {: RESULT = new AndThen(a, b, aleft, aright); :} %prec AND_THEN
            | expresion:a OR ELSE expresion:b           {: RESULT = new OrElse(a, b, aleft, aright); :} %prec OR_ELSE
            | PAR_A expresion:a PAR_C                   {: RESULT = a; :}
            | NOT expresion:a                           {: RESULT = new NOT(a, aleft, aright); :}    %prec NOT
            | MENOS expresion:a                         {: RESULT = new Unario(a, aleft, aright); :} %prec UNARIO
            | valor:a                                   {: RESULT = a; :}
;

//public Terminal(Object value, Tipo tipo, int line, int col) {
valor::=  ENTERO:a  {: RESULT = new Terminal(Integer.parseInt(a), new Tipo(DataType.ENTERO), aleft, aright); :}
        | DECIMAL:a {: RESULT = new Terminal(Double.parseDouble(a), new Tipo(DataType.REAL), aleft, aright); :}
        | CADENA:a  {: RESULT = new Terminal(a, new Tipo(DataType.CADENA), aleft, aright); :}
        | TRUE:a    {: RESULT = new Terminal(true, new Tipo(DataType.BOOLEAN), aleft, aright); :}
        | FALSE:a   {: RESULT = new Terminal(false, new Tipo(DataType.BOOLEAN), aleft, aright); :}
        | IDENTIFICADOR:a   {: RESULT = new Acceso(a, aleft, aright); :}
        | IDENTIFICADOR:a COR_A expresion:b COR_C {: RESULT = new AccesoArray(a, b, aleft, aright); :}
        | llamada_funcion:a {: RESULT = a; :}
;

data_type::=  INTEGER:a {: RESULT = DataType.ENTERO; :}
            | REAL:a    {: RESULT = DataType.REAL; :}
            | BOOLEAN:a {: RESULT = DataType.BOOLEAN; :}
            | STRING:a  {: RESULT = DataType.CADENA; :}
            | TKCHAR:a  {: RESULT = DataType.CARACTER; :}
;


